{"version":3,"file":"PreferencesController.js","sourceRoot":"","sources":["../../src/user/PreferencesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toChecksumAddress } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { ContactEntry } from './AddressBookController';\n\n/**\n * Custom RPC network information\n *\n * @param rpcUrl - RPC target URL\n * @param chainId? - Network ID as per EIP-155\n * @param ticker? - Currency ticker\n * @param nickname? - Personalized network name\n * @param rpcPrefs? - Personalized preferences\n */\nexport interface FrequentRpc {\n\trpcUrl: string;\n\tchainId?: number;\n\tnickname?: string;\n\tticker?: string;\n\trpcPrefs?: RpcPreferences;\n}\n\n/**\n * Custom RPC network preferences\n *\n * @param blockExplorerUrl - Block explorer URL\n */\nexport interface RpcPreferences {\n\tblockExplorerUrl: string;\n}\n\n/**\n * @type PreferencesState\n *\n * Preferences controller state\n *\n * @property featureFlags - Map of specific features to enable or disable\n * @property frequentRpcList - A list of custom RPCs to provide the user\n * @property identities - Map of addresses to ContactEntry objects\n * @property lostIdentities - Map of lost addresses to ContactEntry objects\n * @property selectedAddress - Current coinbase account\n */\nexport interface PreferencesState extends BaseState {\n\tfeatureFlags: { [feature: string]: boolean };\n\tfrequentRpcList: FrequentRpc[];\n\tipfsGateway: string;\n\tidentities: { [address: string]: ContactEntry };\n\tlostIdentities: { [address: string]: ContactEntry };\n\tselectedAddress: string;\n}\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nexport class PreferencesController extends BaseController<BaseConfig, PreferencesState> {\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'PreferencesController';\n\n\t/**\n\t * Creates a PreferencesController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<BaseConfig>, state?: Partial<PreferencesState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultState = {\n\t\t\tfeatureFlags: {},\n\t\t\tfrequentRpcList: [],\n\t\t\tidentities: {},\n\t\t\tipfsGateway: 'https://ipfs.io/ipfs/',\n\t\t\tlostIdentities: {},\n\t\t\tselectedAddress: ''\n\t\t};\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Adds identities to state\n\t *\n\t * @param addresses - List of addresses to use to generate new identities\n\t */\n\taddIdentities(addresses: string[]) {\n\t\tconst { identities } = this.state;\n\t\taddresses.forEach((address) => {\n\t\t\taddress = toChecksumAddress(address);\n\t\t\tif (identities[address]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst identityCount = Object.keys(identities).length;\n\n\t\t\tidentities[address] = { name: `Account ${identityCount + 1}`, address };\n\t\t});\n\t\tthis.update({ identities: { ...identities } });\n\t}\n\n\t/**\n\t * Removes an identity from state\n\t *\n\t * @param address - Address of the identity to remove\n\t */\n\tremoveIdentity(address: string) {\n\t\taddress = toChecksumAddress(address);\n\t\tconst { identities } = this.state;\n\t\tif (!identities[address]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete identities[address];\n\t\tthis.update({ identities: { ...identities } });\n\t\tif (address === this.state.selectedAddress) {\n\t\t\tthis.update({ selectedAddress: Object.keys(identities)[0] });\n\t\t}\n\t}\n\n\t/**\n\t * Associates a new label with an identity\n\t *\n\t * @param address - Address of the identity to associate\n\t * @param label - New label to assign\n\t */\n\tsetAccountLabel(address: string, label: string) {\n\t\taddress = toChecksumAddress(address);\n\t\tconst identities = this.state.identities;\n\t\tidentities[address] = identities[address] || {};\n\t\tidentities[address].name = label;\n\t\tthis.update({ identities: { ...identities } });\n\t}\n\n\t/**\n\t * Enable or disable a specific feature flag\n\t *\n\t * @param feature - Feature to toggle\n\t * @param activated - Value to assign\n\t */\n\tsetFeatureFlag(feature: string, activated: boolean) {\n\t\tconst oldFeatureFlags = this.state.featureFlags;\n\t\tconst featureFlags = { ...oldFeatureFlags, ...{ [feature]: activated } };\n\t\tthis.update({ featureFlags: { ...featureFlags } });\n\t}\n\n\t/**\n\t * Synchronizes the current identity list with new identities\n\t *\n\t * @param addresses - List of addresses corresponding to identities to sync\n\t * @returns - Newly-selected address after syncing\n\t */\n\tsyncIdentities(addresses: string[]) {\n\t\taddresses = addresses.map((address: string) => toChecksumAddress(address));\n\t\tconst { identities, lostIdentities } = this.state;\n\t\tconst newlyLost: { [address: string]: ContactEntry } = {};\n\n\t\tfor (const identity in identities) {\n\t\t\tif (addresses.indexOf(identity) === -1) {\n\t\t\t\tnewlyLost[identity] = identities[identity];\n\t\t\t\tdelete identities[identity];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(newlyLost).length > 0) {\n\t\t\tfor (const key in newlyLost) {\n\t\t\t\tlostIdentities[key] = newlyLost[key];\n\t\t\t}\n\t\t}\n\n\t\tthis.update({ identities: { ...identities }, lostIdentities: { ...lostIdentities } });\n\t\tthis.addIdentities(addresses);\n\n\t\tif (addresses.indexOf(this.state.selectedAddress) === -1) {\n\t\t\tthis.update({ selectedAddress: addresses[0] });\n\t\t}\n\n\t\treturn this.state.selectedAddress;\n\t}\n\n\t/**\n\t * Generates and stores a new list of stored identities based on address\n\t *\n\t * @param addresses - List of addresses to use as a basis for each identity\n\t */\n\tupdateIdentities(addresses: string[]) {\n\t\taddresses = addresses.map((address: string) => toChecksumAddress(address));\n\t\tconst oldIdentities = this.state.identities;\n\t\tconst identities = addresses.reduce((ids: { [address: string]: ContactEntry }, address, index) => {\n\t\t\tids[address] = {\n\t\t\t\taddress,\n\t\t\t\tname: `Account ${index + 1}`,\n\t\t\t\t...(oldIdentities[address] || {})\n\t\t\t};\n\t\t\treturn ids;\n\t\t}, {});\n\t\tthis.update({ identities: { ...identities } });\n\t}\n\n\t/**\n\t * Adds custom RPC URL to state\n\t *\n\t * @param url - Custom RPC URL\n\t * @param chainId? - Network ID as per EIP-155\n\t * @param ticker? - Currency ticker\n\t * @param nickname? - Personalized network name\n\t * @param rpcPrefs? - Personalized preferences\n\t *\n\t */\n\taddToFrequentRpcList(url: string, chainId?: number, ticker?: string, nickname?: string, rpcPrefs?: RpcPreferences) {\n\t\tconst frequentRpcList = this.state.frequentRpcList;\n\t\tconst index = frequentRpcList.findIndex(({ rpcUrl }) => {\n\t\t\treturn rpcUrl === url;\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tfrequentRpcList.splice(index, 1);\n\t\t}\n\t\tconst newFrequestRpc: FrequentRpc = { rpcUrl: url, chainId, ticker, nickname, rpcPrefs };\n\t\tfrequentRpcList.push(newFrequestRpc);\n\t\tthis.update({ frequentRpcList: [...frequentRpcList] });\n\t}\n\n\t/**\n\t * Removes custom RPC URL from state\n\t *\n\t * @param url - Custom RPC URL\n\t */\n\tremoveFromFrequentRpcList(url: string) {\n\t\tconst frequentRpcList = this.state.frequentRpcList;\n\t\tconst index = frequentRpcList.findIndex(({ rpcUrl }) => {\n\t\t\treturn rpcUrl === url;\n\t\t});\n\t\tif (index !== -1) {\n\t\t\tfrequentRpcList.splice(index, 1);\n\t\t}\n\t\tthis.update({ frequentRpcList: [...frequentRpcList] });\n\t}\n\n\t/**\n\t * Sets selected address\n\t *\n\t * @param selectedAddress - Ethereum address\n\t */\n\tsetSelectedAddress(selectedAddress: string) {\n\t\tthis.update({ selectedAddress: toChecksumAddress(selectedAddress) });\n\t}\n\n\t/**\n\t * Sets new IPFS gateway\n\t *\n\t * @param ipfsGateway - IPFS gateway string\n\t */\n\tsetIpfsGateway(ipfsGateway: string) {\n\t\tthis.update({ ipfsGateway });\n\t}\n}\n\nexport default PreferencesController;\n"]}