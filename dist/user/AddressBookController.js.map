{"version":3,"file":"AddressBookController.js","sourceRoot":"","sources":["../../src/user/AddressBookController.ts"],"names":[],"mappings":";;AAAA,qDAAoE;AACpE,kCAA2C;AAC3C,sDAA0E;AA6C1E;;GAEG;AACH,MAAa,qBAAsB,SAAQ,wBAA4C;IAMtF;;;;;OAKG;IACH,YAAY,MAA4B,EAAE,KAAiC;QAC1E,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZtB;;WAEG;QACH,SAAI,GAAG,uBAAuB,CAAC;QAW9B,IAAI,CAAC,YAAY,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAExC,IAAI,CAAC,UAAU,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,KAAK;QACJ,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,OAAe,EAAE,OAAe;QACtC,OAAO,GAAG,mCAAiB,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,gCAAc,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;YAC9G,OAAO,KAAK,CAAC;SACb;QAED,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC9D,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;SAC5B;QAED,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;;OAQG;IACH,GAAG,CAAC,OAAe,EAAE,IAAY,EAAE,OAAO,GAAG,GAAG,EAAE,IAAI,GAAG,EAAE;QAC1D,OAAO,GAAG,mCAAiB,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,gCAAc,CAAC,OAAO,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACb;QAED,MAAM,KAAK,GAAG;YACb,OAAO;YACP,OAAO;YACP,KAAK,EAAE,KAAK;YACZ,IAAI;YACJ,IAAI;SACJ,CAAC;QAEF,MAAM,OAAO,GAAG,uBAAgB,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,OAAO,EAAE;YACZ,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACrB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;QAED,IAAI,CAAC,MAAM,CAAC;YACX,WAAW,kCACP,IAAI,CAAC,KAAK,CAAC,WAAW,KACzB,CAAC,OAAO,CAAC,kCACL,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,KAClC,CAAC,OAAO,CAAC,EAAE,KAAK,MAEjB;SACD,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AA1FD,sDA0FC;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import { isValidAddress, toChecksumAddress } from 'ethereumjs-util';\nimport { normalizeEnsName } from '../util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\n\n/**\n * @type ContactEntry\n *\n * ContactEntry representation\n *\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n */\nexport interface ContactEntry {\n\taddress: string;\n\tname: string;\n}\n\n/**\n * @type AddressBookEntry\n *\n * AddressBookEntry representation\n *\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property chainId - Chain id identifies the current chain\n * @property memo - User's note about address\n * @property isEns - is the entry an ENS name\n */\nexport interface AddressBookEntry {\n\taddress: string;\n\tname: string;\n\tchainId: string;\n\tmemo: string;\n\tisEns: boolean;\n}\n\n/**\n * @type AddressBookState\n *\n * Address book controller state\n *\n * @property addressBook - Array of contact entry objects\n */\nexport interface AddressBookState extends BaseState {\n\taddressBook: { [chainId: string]: { [address: string]: AddressBookEntry } };\n}\n\n/**\n * Controller that manages a list of recipient addresses associated with nicknames\n */\nexport class AddressBookController extends BaseController<BaseConfig, AddressBookState> {\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'AddressBookController';\n\n\t/**\n\t * Creates an AddressBookController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<BaseConfig>, state?: Partial<AddressBookState>) {\n\t\tsuper(config, state);\n\n\t\tthis.defaultState = { addressBook: {} };\n\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Remove all contract entries\n\t */\n\tclear() {\n\t\tthis.update({ addressBook: {} });\n\t}\n\n\t/**\n\t * Remove a contract entry by address\n\t *\n\t * @param address - Recipient address to delete\n\t */\n\tdelete(chainId: string, address: string) {\n\t\taddress = toChecksumAddress(address);\n\t\tif (!isValidAddress(address) || !this.state.addressBook[chainId] || !this.state.addressBook[chainId][address]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst addressBook = Object.assign({}, this.state.addressBook);\n\t\tdelete addressBook[chainId][address];\n\n\t\tif (Object.keys(addressBook[chainId]).length === 0) {\n\t\t\tdelete addressBook[chainId];\n\t\t}\n\n\t\tthis.update({ addressBook });\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add or update a contact entry by address\n\t *\n\t * @param address - Recipient address to add or update\n\t * @param name - Nickname to associate with this address\n\t * @param chainId - Chain id identifies the current chain\n\t * @param memo - User's note about address\n\t * @returns - Boolean indicating if the address was successfully set\n\t */\n\tset(address: string, name: string, chainId = '1', memo = '') {\n\t\taddress = toChecksumAddress(address);\n\t\tif (!isValidAddress(address)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst entry = {\n\t\t\taddress,\n\t\t\tchainId,\n\t\t\tisEns: false,\n\t\t\tmemo,\n\t\t\tname\n\t\t};\n\n\t\tconst ensName = normalizeEnsName(name);\n\t\tif (ensName) {\n\t\t\tentry.name = ensName;\n\t\t\tentry.isEns = true;\n\t\t}\n\n\t\tthis.update({\n\t\t\taddressBook: {\n\t\t\t\t...this.state.addressBook,\n\t\t\t\t[chainId]: {\n\t\t\t\t\t...this.state.addressBook[chainId],\n\t\t\t\t\t[address]: entry\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn true;\n\t}\n}\n\nexport default AddressBookController;\n"]}