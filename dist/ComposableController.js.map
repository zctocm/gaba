{"version":3,"file":"ComposableController.js","sourceRoot":"","sources":["../src/ComposableController.ts"],"names":[],"mappings":";;AAAA,qDAA8C;AAc9C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,wBAAwB;IAcjE;;;;;OAKG;IACH,YAAY,cAA8B,EAAE,EAAE,YAAkB;QAC/D,KAAK,EAAE,CAAC;QAnBD,wBAAmB,GAAmB,EAAE,CAAC;QAEjD;;WAEG;QACH,YAAO,GAA2B,EAAE,CAAC;QAErC;;WAEG;QACH,SAAI,GAAG,sBAAsB,CAAC;QAU7B,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,IAAI,WAAW,CAAC,WAA2B;QAC1C,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC;QACvC,MAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAClC,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;YAChC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACxF,YAAY,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YACtC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAClC,UAAU,CAAC,UAAU,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,SAAS;QACZ,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAChC,SAAS,mCAAQ,SAAS,GAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAE,CAAC;SAC1D;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;CACD;AA3ED,oDA2EC;AAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import BaseController from './BaseController';\n\n/**\n * Child controller instances keyed by controller name\n */\nexport interface ChildControllerContext {\n\t[key: string]: BaseController<any, any>;\n}\n\n/**\n * List of child controller instances\n */\nexport type ControllerList = Array<BaseController<any, any>>;\n\n/**\n * Controller that can be used to compose multiple controllers together\n */\nexport class ComposableController extends BaseController<any, any> {\n\tprivate cachedState: any;\n\tprivate internalControllers: ControllerList = [];\n\n\t/**\n\t * Map of stores to compose together\n\t */\n\tcontext: ChildControllerContext = {};\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'ComposableController';\n\n\t/**\n\t * Creates a ComposableController instance\n\t *\n\t * @param controllers - Map of names to controller instances\n\t * @param initialState - Initial state keyed by child controller name\n\t */\n\tconstructor(controllers: ControllerList = [], initialState?: any) {\n\t\tsuper();\n\t\tthis.initialize();\n\t\tthis.cachedState = initialState;\n\t\tthis.controllers = controllers;\n\t\tthis.cachedState = undefined;\n\t}\n\n\t/**\n\t * Get current list of child composed store instances\n\t *\n\t * @returns - List of names to controller instances\n\t */\n\tget controllers() {\n\t\treturn this.internalControllers;\n\t}\n\n\t/**\n\t * Set new list of controller instances\n\t *\n\t * @param controllers - List of names to controller instsances\n\t */\n\tset controllers(controllers: ControllerList) {\n\t\tthis.internalControllers = controllers;\n\t\tconst initialState: any = {};\n\t\tcontrollers.forEach((controller) => {\n\t\t\tconst name = controller.name;\n\t\t\tthis.context[name] = controller;\n\t\t\tcontroller.context = this.context;\n\t\t\tthis.cachedState && this.cachedState[name] && controller.update(this.cachedState[name]);\n\t\t\tinitialState[name] = controller.state;\n\t\t\tcontroller.subscribe((state) => {\n\t\t\t\tthis.update({ [name]: state });\n\t\t\t});\n\t\t});\n\t\tcontrollers.forEach((controller) => {\n\t\t\tcontroller.onComposed();\n\t\t});\n\t\tthis.update(initialState, true);\n\t}\n\n\t/**\n\t * Flat state representation, one that isn't keyed\n\t * of controller name. Instead, all child controller state is merged\n\t * together into a single, flat object.\n\t *\n\t * @returns - Merged state representation of all child controllers\n\t */\n\tget flatState() {\n\t\tlet flatState = {};\n\t\tfor (const name in this.context) {\n\t\t\tflatState = { ...flatState, ...this.context[name].state };\n\t\t}\n\t\treturn flatState;\n\t}\n}\n\nexport default ComposableController;\n"]}