{"version":3,"file":"MessageManager.js","sourceRoot":"","sources":["../../src/message-manager/MessageManager.ts"],"names":[],"mappings":";;AAAA,kCAAwE;AACxE,qEAKkC;AAClC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AA8ClC;;GAEG;AACH,MAAa,cAAe,SAAQ,gCAAqE;IAAzG;;QACC;;WAEG;QACH,SAAI,GAAG,gBAAgB,CAAC;IAoEzB,CAAC;IAlEA;;;;;;;OAOG;IACH,yBAAyB,CAAC,aAA4B,EAAE,GAAqB;QAC5E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,8BAAuB,CAAC,aAAa,CAAC,CAAC;YACvC,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;YAChE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,SAAS,WAAW,EAAE,CAAC,IAAa,EAAE,EAAE;gBACxD,QAAQ,IAAI,CAAC,MAAM,EAAE;oBACpB,KAAK,QAAQ;wBACZ,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC7B,KAAK,UAAU;wBACd,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC,CAAC;oBACxF;wBACC,OAAO,MAAM,CACZ,IAAI,KAAK,CAAC,gDAAgD,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAC1F,CAAC;iBACH;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;;;;OASG;IACH,oBAAoB,CAAC,aAA4B,EAAE,GAAqB;QACvE,IAAI,GAAG,EAAE;YACR,aAAa,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;SAClC;QACD,aAAa,CAAC,IAAI,GAAG,2BAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC;QAC3B,MAAM,WAAW,GAAY;YAC5B,EAAE,EAAE,SAAS;YACb,aAAa;YACb,MAAM,EAAE,YAAY;YACpB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;YAChB,IAAI,EAAE,UAAU;SAChB,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,kCAAO,aAAa,GAAK,EAAE,UAAU,EAAE,SAAS,EAAE,EAAG,CAAC;QACvF,OAAO,SAAS,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,qBAAqB,CAAC,aAAoC;QACzD,OAAO,aAAa,CAAC,UAAU,CAAC;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;CACD;AAxED,wCAwEC;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import { validateSignMessageData, normalizeMessageData } from '../util';\nimport AbstractMessageManager, {\n\tAbstractMessage,\n\tAbstractMessageParams,\n\tAbstractMessageParamsMetamask,\n\tOriginalRequest\n} from './AbstractMessageManager';\nconst random = require('uuid/v1');\n\n/**\n * @type Message\n *\n * Represents and contains data about a 'eth_sign' type signature request.\n * These are created when a signature for an eth_sign call is requested.\n *\n * @property id - An id to track and identify the message object\n * @property messageParams - The parameters to pass to the eth_sign method once the signature request is approved\n * @property type - The json-prc signing method for which a signature request has been made.\n * A 'Message' which always has a 'eth_sign' type\n * @property rawSig - Raw data of the signature request\n */\nexport interface Message extends AbstractMessage {\n\tmessageParams: MessageParams;\n}\n\n/**\n * @type PersonalMessageParams\n *\n * Represents the parameters to pass to the eth_sign method once the signature request is approved.\n *\n * @property data - A hex string conversion of the raw buffer data of the signature request\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n */\nexport interface MessageParams extends AbstractMessageParams {\n\tdata: string;\n}\n\n/**\n * @type MessageParamsMetamask\n *\n * Represents the parameters to pass to the eth_sign method once the signature request is approved\n * plus data added by MetaMask.\n *\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property data - A hex string conversion of the raw buffer data of the signature request\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n */\nexport interface MessageParamsMetamask extends AbstractMessageParamsMetamask {\n\tdata: string;\n}\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - Messages.\n */\nexport class MessageManager extends AbstractMessageManager<Message, MessageParams, MessageParamsMetamask> {\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'MessageManager';\n\n\t/**\n\t * Creates a new Message with an 'unapproved' status using the passed messageParams.\n\t * this.addMessage is called to add the new Message to this.messages, and to save the unapproved Messages.\n\t *\n\t * @param messageParams - The params for the eth_sign call to be made after the message is approved\n\t * @param req? - The original request object possibly containing the origin\n\t * @returns - Promise resolving to the raw data of the signature request\n\t */\n\taddUnapprovedMessageAsync(messageParams: MessageParams, req?: OriginalRequest): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvalidateSignMessageData(messageParams);\n\t\t\tconst messageId = this.addUnapprovedMessage(messageParams, req);\n\t\t\tthis.hub.once(`${messageId}:finished`, (data: Message) => {\n\t\t\t\tswitch (data.status) {\n\t\t\t\t\tcase 'signed':\n\t\t\t\t\t\treturn resolve(data.rawSig);\n\t\t\t\t\tcase 'rejected':\n\t\t\t\t\t\treturn reject(new Error('MetaMask Message Signature: User denied message signature.'));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\tnew Error(`MetaMask Message Signature: Unknown problem: ${JSON.stringify(messageParams)}`)\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new Message with an 'unapproved' status using the passed messageParams.\n\t * this.addMessage is called to add the new Message to this.messages, and to save the\n\t * unapproved Messages.\n\t *\n\t * @param messageParams - The params for the eth_sign call to be made after the message\n\t * is approved\n\t * @param req? - The original request object possibly containing the origin\n\t * @returns - The id of the newly created message\n\t */\n\taddUnapprovedMessage(messageParams: MessageParams, req?: OriginalRequest) {\n\t\tif (req) {\n\t\t\tmessageParams.origin = req.origin;\n\t\t}\n\t\tmessageParams.data = normalizeMessageData(messageParams.data);\n\t\tconst messageId = random();\n\t\tconst messageData: Message = {\n\t\t\tid: messageId,\n\t\t\tmessageParams,\n\t\t\tstatus: 'unapproved',\n\t\t\ttime: Date.now(),\n\t\t\ttype: 'eth_sign'\n\t\t};\n\t\tthis.addMessage(messageData);\n\t\tthis.hub.emit(`unapprovedMessage`, { ...messageParams, ...{ metamaskId: messageId } });\n\t\treturn messageId;\n\t}\n\n\t/**\n\t * Removes the metamaskId property from passed messageParams and returns a promise which\n\t * resolves the updated messageParams\n\t *\n\t * @param messageParams - The messageParams to modify\n\t * @returns - Promise resolving to the messageParams with the metamaskId property removed\n\t */\n\tprepMessageForSigning(messageParams: MessageParamsMetamask): Promise<MessageParams> {\n\t\tdelete messageParams.metamaskId;\n\t\treturn Promise.resolve(messageParams);\n\t}\n}\n\nexport default MessageManager;\n"]}