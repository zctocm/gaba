{"version":3,"file":"TypedMessageManager.js","sourceRoot":"","sources":["../../src/message-manager/TypedMessageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { validateTypedSignMessageDataV3, validateTypedSignMessageDataV1 } from '../util';\nimport AbstractMessageManager, {\n\tAbstractMessage,\n\tAbstractMessageParams,\n\tAbstractMessageParamsMetamask,\n\tOriginalRequest\n} from './AbstractMessageManager';\nconst random = require('uuid/v1');\n\n/**\n * @type TypedMessage\n *\n * Represents and contains data about an 'eth_signTypedData' type signature request.\n * These are created when a signature for an eth_signTypedData call is requested.\n *\n * @property id - An id to track and identify the message object\n * @property error - Error corresponding to eth_signTypedData error in failure case\n * @property messageParams - The parameters to pass to the eth_signTypedData method once\n * the signature request is approved\n * @property type - The json-prc signing method for which a signature request has been made.\n * A 'TypedMessage' which always has a 'eth_signTypedData' type\n * @property rawSig - Raw data of the signature request\n */\nexport interface TypedMessage extends AbstractMessage {\n\terror?: string;\n\tmessageParams: TypedMessageParams;\n\ttime: number;\n\tstatus: string;\n\ttype: string;\n\trawSig?: string;\n}\n\n/**\n * @type TypedMessageParams\n *\n * Represents the parameters to pass to the eth_signTypedData method once the signature request is approved.\n *\n * @property data - A hex string conversion of the raw buffer or an object containing data of the signature\n * request depending on version\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n */\nexport interface TypedMessageParams extends AbstractMessageParams {\n\tdata: object[] | string;\n}\n\n/**\n * @type TypedMessageParamsMetamask\n *\n * Represents the parameters to pass to the eth_signTypedData method once the signature request is approved\n * plus data added by MetaMask.\n *\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property data - A hex string conversion of the raw buffer or an object containing data of the signature\n * request depending on version\n * @property error? - Added for message errored\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n * @property version - Compatibility version EIP712\n */\nexport interface TypedMessageParamsMetamask extends AbstractMessageParamsMetamask {\n\tdata: object[] | string;\n\tmetamaskId: string;\n\terror?: string;\n\tversion: string;\n}\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - TypedMessages.\n */\nexport class TypedMessageManager extends AbstractMessageManager<\n\tTypedMessage,\n\tTypedMessageParams,\n\tTypedMessageParamsMetamask\n> {\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'TypedMessageManager';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = ['NetworkController'];\n\n\t/**\n\t * Creates a new TypedMessage with an 'unapproved' status using the passed messageParams.\n\t * this.addMessage is called to add the new TypedMessage to this.messages, and to save the unapproved TypedMessages.\n\t *\n\t * @param messageParams - The params for the eth_signTypedData call to be made after the message is approved\n\t * @param version - Compatibility version EIP712\n\t * @param req? - The original request object possibly containing the origin\n\t * @returns - Promise resolving to the raw data of the signature request\n\t */\n\taddUnapprovedMessageAsync(\n\t\tmessageParams: TypedMessageParams,\n\t\tversion: string,\n\t\treq?: OriginalRequest\n\t): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (version === 'V1') {\n\t\t\t\tvalidateTypedSignMessageDataV1(messageParams);\n\t\t\t}\n\t\t\tif (version === 'V3') {\n\t\t\t\tvalidateTypedSignMessageDataV3(messageParams);\n\t\t\t}\n\t\t\tconst messageId = this.addUnapprovedMessage(messageParams, version, req);\n\t\t\tthis.hub.once(`${messageId}:finished`, (data: TypedMessage) => {\n\t\t\t\tswitch (data.status) {\n\t\t\t\t\tcase 'signed':\n\t\t\t\t\t\treturn resolve(data.rawSig);\n\t\t\t\t\tcase 'rejected':\n\t\t\t\t\t\treturn reject(new Error('MetaMask Typed Message Signature: User denied message signature.'));\n\t\t\t\t\tcase 'errored':\n\t\t\t\t\t\treturn reject(new Error(`MetaMask Typed Message Signature: ${data.error}`));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t`MetaMask Typed Message Signature: Unknown problem: ${JSON.stringify(messageParams)}`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new TypedMessage with an 'unapproved' status using the passed messageParams.\n\t * this.addMessage is called to add the new TypedMessage to this.messages, and to save the\n\t * unapproved TypedMessages.\n\t *\n\t * @param messageParams - The params for the 'eth_signTypedData' call to be made after the message\n\t * is approved\n\t * @param version - Compatibility version EIP712\n\t * @param req? - The original request object possibly containing the origin\n\t * @returns - The id of the newly created TypedMessage\n\t */\n\taddUnapprovedMessage(messageParams: TypedMessageParams, version: string, req?: OriginalRequest) {\n\t\tconst messageId = random();\n\t\tconst messageParamsMetamask = { ...messageParams, metamaskId: messageId, version };\n\t\tif (req) {\n\t\t\tmessageParams.origin = req.origin;\n\t\t}\n\t\tconst messageData: TypedMessage = {\n\t\t\tid: messageId,\n\t\t\tmessageParams,\n\t\t\tstatus: 'unapproved',\n\t\t\ttime: Date.now(),\n\t\t\ttype: 'eth_signTypedData'\n\t\t};\n\t\tthis.addMessage(messageData);\n\t\tthis.hub.emit(`unapprovedMessage`, messageParamsMetamask);\n\t\treturn messageId;\n\t}\n\n\t/**\n\t * Sets a TypedMessage status to 'errored' via a call to this.setMessageStatus.\n\t *\n\t * @param messageId - The id of the TypedMessage to error\n\t * @param error - The error to be included in TypedMessage\n\t */\n\tsetMessageStatusErrored(messageId: string, error: string) {\n\t\tconst message = this.getMessage(messageId);\n\t\t/* istanbul ignore if */\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\t\tmessage.error = error;\n\t\tthis.updateMessage(message);\n\t\tthis.setMessageStatus(messageId, 'errored');\n\t}\n\n\t/**\n\t * Removes the metamaskId and version properties from passed messageParams and returns a promise which\n\t * resolves the updated messageParams\n\t *\n\t * @param messageParams - The messageParams to modify\n\t * @returns - Promise resolving to the messageParams with the metamaskId and version properties removed\n\t */\n\tprepMessageForSigning(messageParams: TypedMessageParamsMetamask): Promise<TypedMessageParams> {\n\t\tdelete messageParams.metamaskId;\n\t\tdelete messageParams.version;\n\t\treturn Promise.resolve(messageParams);\n\t}\n}\n\nexport default TypedMessageManager;\n"]}