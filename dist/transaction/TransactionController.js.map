{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../../src/transaction/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport NetworkController from '../network/NetworkController';\nimport {\n\tBNToHex,\n\tfractionBN,\n\thandleFetch,\n\thexToBN,\n\tnormalizeTransaction,\n\tsafelyExecute,\n\tvalidateTransaction,\n\tisSmartContractCode\n} from '../util';\nconst MethodRegistry = require('eth-method-registry');\nconst EthQuery = require('eth-query');\nconst Transaction = require('ethereumjs-tx');\nconst random = require('uuid/v1');\nconst { BN } = require('ethereumjs-util');\nconst Mutex = require('await-semaphore').Mutex;\n\n/**\n * @type Result\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n\tresult: Promise<string>;\n\ttransactionMeta: TransactionMeta;\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n *\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n\tchainId?: number;\n\tdata?: string;\n\tfrom: string;\n\tgas?: string;\n\tgasPrice?: string;\n\tnonce?: string;\n\tto?: string;\n\tvalue?: string;\n}\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n *\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport interface TransactionMeta {\n\terror?: {\n\t\tmessage: string;\n\t\tstack?: string;\n\t};\n\tid: string;\n\tnetworkID?: string;\n\torigin?: string;\n\trawTransaction?: string;\n\tstatus: string;\n\ttime: number;\n\ttoSmartContract?: boolean;\n\ttransaction: Transaction;\n\ttransactionHash?: string;\n\tblockNumber?: string;\n}\n\n/**\n * @type EtherscanTransactionMeta\n *\n * EtherscanTransactionMeta representation\n * @property blockNumber - Number of the block where the transaction has been included\n * @property timeStamp - Timestamp associated with this transaction\n * @property hash - Hash of a successful transaction\n * @property nonce - Nonce of the transaction\n * @property blockHash - Hash of the block where the transaction has been included\n * @property transactionIndex - Etherscan internal index for this transaction\n * @property from - Address to send this transaction from\n * @property to - Address to send this transaction to\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property isError - Synthesized error information for failed transactions\n * @property txreceipt_status - Receipt status for this transaction\n * @property input - input of the transaction\n * @property contractAddress - Address of the contract\n * @property cumulativeGasUsed - Amount of gas used\n * @property confirmations - Number of confirmations\n *\n */\nexport interface EtherscanTransactionMeta {\n\tblockNumber: string;\n\ttimeStamp: string;\n\thash: string;\n\tnonce: string;\n\tblockHash: string;\n\ttransactionIndex: string;\n\tfrom: string;\n\tto: string;\n\tvalue: string;\n\tgas: string;\n\tgasPrice: string;\n\tisError: string;\n\ttxreceipt_status: string;\n\tinput: string;\n\tcontractAddress: string;\n\tcumulativeGasUsed: string;\n\tgasUsed: string;\n\tconfirmations: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n *\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n\tinterval: number;\n\tprovider: any;\n\tsign?: (transaction: Transaction, from: string) => Promise<any>;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n\tregistryMethod: string;\n\tparsedRegistryMethod: object;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n\ttransactions: TransactionMeta[];\n\tmethodData: { [key: string]: MethodData };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Controller responsible for submitting and managing transactions\n */\nexport class TransactionController extends BaseController<TransactionConfig, TransactionState> {\n\tprivate ethQuery: any;\n\tprivate registry: any;\n\tprivate handle?: NodeJS.Timer;\n\tprivate mutex = new Mutex();\n\n\tprivate failTransaction(transactionMeta: TransactionMeta, error: Error) {\n\t\ttransactionMeta.status = 'failed';\n\t\ttransactionMeta.error = error;\n\t\tthis.updateTransaction(transactionMeta);\n\t\tthis.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n\t}\n\n\tprivate query(method: string, args: any[] = []): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.ethQuery[method](...args, (error: Error, result: any) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n\t\tconst registryMethod = await this.registry.lookup(fourBytePrefix);\n\t\tconst parsedRegistryMethod = this.registry.parse(registryMethod);\n\t\treturn { registryMethod, parsedRegistryMethod };\n\t}\n\n\t/**\n\t * Normalizes the transaction information from etherscan\n\t * to be compatible with the TransactionMeta interface\n\t *\n\t * @param txMeta - Object containing the transaction information\n\t * @param currentNetworkID - string representing the current network id\n\t * @returns - TransactionMeta\n\t */\n\tprivate normalizeTxFromEtherscan(txMeta: EtherscanTransactionMeta, currentNetworkID: string): TransactionMeta {\n\t\tconst time = parseInt(txMeta.timeStamp, 10) * 1000;\n\t\t/* istanbul ignore next */\n\t\tconst status = txMeta.isError === '0' ? 'confirmed' : 'failed';\n\t\treturn {\n\t\t\tblockNumber: txMeta.blockNumber,\n\t\t\tid: random({ msecs: time }),\n\t\t\tnetworkID: currentNetworkID,\n\t\t\tstatus,\n\t\t\ttime,\n\t\t\ttransaction: {\n\t\t\t\tdata: txMeta.input,\n\t\t\t\tfrom: txMeta.from,\n\t\t\t\tgas: BNToHex(new BN(txMeta.gas)),\n\t\t\t\tgasPrice: BNToHex(new BN(txMeta.gasPrice)),\n\t\t\t\tnonce: BNToHex(new BN(txMeta.nonce)),\n\t\t\t\tto: txMeta.to,\n\t\t\t\tvalue: BNToHex(new BN(txMeta.value))\n\t\t\t},\n\t\t\ttransactionHash: txMeta.hash\n\t\t};\n\t}\n\n\t/**\n\t * EventEmitter instance used to listen to specific transactional events\n\t */\n\thub = new EventEmitter();\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'TransactionController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = ['NetworkController'];\n\n\t/**\n\t * Method used to sign transactions\n\t */\n\tsign?: (transaction: Transaction, from: string) => Promise<void>;\n\n\t/**\n\t * Creates a TransactionController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<TransactionConfig>, state?: Partial<TransactionState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tinterval: 5000,\n\t\t\tprovider: undefined\n\t\t};\n\t\tthis.defaultState = {\n\t\t\tmethodData: {},\n\t\t\ttransactions: []\n\t\t};\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new transaction statuses\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.queryTransactionStatuses());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Handle new method data request\n\t *\n\t * @param fourBytePrefix - String corresponding to method prefix\n\t * @returns - Promise resolving to method data object corresponding to signature prefix\n\t */\n\tasync handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n\t\tconst releaseLock = await this.mutex.acquire();\n\t\tconst { methodData } = this.state;\n\t\tconst knownMethod = Object.keys(methodData).find(\n\t\t\t(knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix\n\t\t);\n\t\tif (knownMethod) {\n\t\t\treleaseLock();\n\t\t\treturn methodData[fourBytePrefix];\n\t\t}\n\t\tconst registry = await this.registryLookup(fourBytePrefix);\n\t\tthis.update({ methodData: { ...methodData, ...{ [fourBytePrefix]: registry } } });\n\t\treleaseLock();\n\t\treturn registry;\n\t}\n\n\t/**\n\t * Add a new unapproved transaction to state. Parameters will be validated, a\n\t * unique transaction id will be generated, and gas and gasPrice will be calculated\n\t * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n\t *\n\t * @param transaction - Transaction object to add\n\t * @param origin - Domain origin to append to the generated TransactionMeta\n\t * @returns - Object containing a promise resolving to the transaction hash if approved\n\t */\n\tasync addTransaction(transaction: Transaction, origin?: string): Promise<Result> {\n\t\tconst network = this.context.NetworkController as NetworkController;\n\t\tconst { transactions } = this.state;\n\t\ttransaction = normalizeTransaction(transaction);\n\t\tvalidateTransaction(transaction);\n\n\t\tconst transactionMeta = {\n\t\t\tid: random(),\n\t\t\tnetworkID: network ? network.state.network : /* istanbul ignore next */ '1',\n\t\t\torigin,\n\t\t\tstatus: 'unapproved',\n\t\t\ttime: Date.now(),\n\t\t\ttransaction\n\t\t};\n\n\t\ttry {\n\t\t\tconst { gas, gasPrice } = await this.estimateGas(transaction);\n\t\t\ttransaction.gas = gas;\n\t\t\ttransaction.gasPrice = gasPrice;\n\t\t} catch (error) {\n\t\t\tthis.failTransaction(transactionMeta, error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tconst result: Promise<string> = new Promise((resolve, reject) => {\n\t\t\tthis.hub.once(`${transactionMeta.id}:finished`, (meta: TransactionMeta) => {\n\t\t\t\tswitch (meta.status) {\n\t\t\t\t\tcase 'submitted':\n\t\t\t\t\t\treturn resolve(meta.transactionHash);\n\t\t\t\t\tcase 'rejected':\n\t\t\t\t\t\treturn reject(new Error('User rejected the transaction.'));\n\t\t\t\t\tcase 'cancelled':\n\t\t\t\t\t\treturn reject(new Error('User cancelled the transaction.'));\n\t\t\t\t\tcase 'failed':\n\t\t\t\t\t\treturn reject(new Error(meta.error!.message));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\ttransactions.push(transactionMeta);\n\t\tthis.update({ transactions: [...transactions] });\n\t\tthis.hub.emit(`unapprovedTransaction`, transactionMeta);\n\t\treturn { result, transactionMeta };\n\t}\n\n\t/**\n\t * Approves a transaction and updates it's status in state. If this is not a\n\t * retry transaction, a nonce will be generated. The transaction is signed\n\t * using the sign configuration property, then published to the blockchain.\n\t * A `<tx.id>:finished` hub event is fired after success or failure.\n\t *\n\t * @param transactionID - ID of the transaction to approve\n\t * @returns - Promise resolving when this operation completes\n\t */\n\tasync approveTransaction(transactionID: string) {\n\t\tconst { transactions } = this.state;\n\t\tconst network = this.context.NetworkController as NetworkController;\n\t\t/* istanbul ignore next */\n\t\tconst currentNetworkID = network ? network.state.network : '1';\n\t\tconst index = transactions.findIndex(({ id }) => transactionID === id);\n\t\tconst transactionMeta = transactions[index];\n\t\tconst { from } = transactionMeta.transaction;\n\n\t\tif (!this.sign) {\n\t\t\tthis.failTransaction(transactionMeta, new Error('No sign method defined.'));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\ttransactionMeta.status = 'approved';\n\t\t\ttransactionMeta.transaction.nonce = await this.query('getTransactionCount', [from, 'pending']);\n\t\t\ttransactionMeta.transaction.chainId = parseInt(currentNetworkID, undefined);\n\n\t\t\tconst ethTransaction = new Transaction({ ...transactionMeta.transaction });\n\t\t\tawait this.sign(ethTransaction, transactionMeta.transaction.from);\n\t\t\ttransactionMeta.status = 'signed';\n\t\t\tthis.updateTransaction(transactionMeta);\n\t\t\tconst rawTransaction = bufferToHex(ethTransaction.serialize());\n\n\t\t\ttransactionMeta.rawTransaction = rawTransaction;\n\t\t\tthis.updateTransaction(transactionMeta);\n\t\t\tconst transactionHash = await this.query('sendRawTransaction', [rawTransaction]);\n\t\t\ttransactionMeta.transactionHash = transactionHash;\n\t\t\ttransactionMeta.status = 'submitted';\n\t\t\tthis.updateTransaction(transactionMeta);\n\t\t\tthis.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n\t\t} catch (error) {\n\t\t\tthis.failTransaction(transactionMeta, error);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels a transaction based on its ID by setting its status to \"rejected\"\n\t * and emitting a `<tx.id>:finished` hub event.\n\t *\n\t * @param transactionID - ID of the transaction to cancel\n\t */\n\tcancelTransaction(transactionID: string) {\n\t\tconst transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n\t\tif (!transactionMeta) {\n\t\t\treturn;\n\t\t}\n\t\ttransactionMeta.status = 'rejected';\n\t\tthis.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n\t\tconst transactions = this.state.transactions.filter(({ id }) => id !== transactionID);\n\t\tthis.update({ transactions: [...transactions] });\n\t}\n\n\t/**\n\t * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n\t * and emitting a `<tx.id>:finished` hub event.\n\t *\n\t * @param transactionID - ID of the transaction to cancel\n\t */\n\tasync stopTransaction(transactionID: string) {\n\t\tconst transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n\t\tif (!transactionMeta) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.sign) {\n\t\t\tthrow new Error('No sign method defined.');\n\t\t}\n\n\t\tconst existingGasPrice = transactionMeta.transaction.gasPrice;\n\t\t/* istanbul ignore next */\n\t\tconst existingGasPriceDecimal = parseInt(existingGasPrice === undefined ? '0x0' : existingGasPrice, 16);\n\t\tconst gasPrice = `0x${(existingGasPriceDecimal * CANCEL_RATE).toString(16)}`;\n\n\t\tconst ethTransaction = new Transaction({\n\t\t\tfrom: transactionMeta.transaction.from,\n\t\t\tgas: transactionMeta.transaction.gas,\n\t\t\tgasPrice,\n\t\t\tnonce: transactionMeta.transaction.nonce,\n\t\t\tto: transactionMeta.transaction.from,\n\t\t\tvalue: '0x0'\n\t\t});\n\n\t\tawait this.sign(ethTransaction, transactionMeta.transaction.from);\n\t\tconst rawTransaction = bufferToHex(ethTransaction.serialize());\n\t\tawait this.query('sendRawTransaction', [rawTransaction]);\n\t\ttransactionMeta.status = 'cancelled';\n\t\tthis.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n\t}\n\n\t/**\n\t * Attemps to speed up a transaction increasing transaction gasPrice by ten percent\n\t *\n\t * @param transactionID - ID of the transaction to speed up\n\t */\n\tasync speedUpTransaction(transactionID: string) {\n\t\tconst transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n\t\t/* istanbul ignore next */\n\t\tif (!transactionMeta) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (!this.sign) {\n\t\t\tthrow new Error('No sign method defined.');\n\t\t}\n\n\t\tconst { transactions } = this.state;\n\t\tconst existingGasPrice = transactionMeta.transaction.gasPrice;\n\t\t/* istanbul ignore next */\n\t\tconst existingGasPriceDecimal = parseInt(existingGasPrice === undefined ? '0x0' : existingGasPrice, 16);\n\t\tconst gasPrice = `0x${(existingGasPriceDecimal * SPEED_UP_RATE).toString(16)}`;\n\t\tconst ethTransaction = new Transaction({ ...transactionMeta.transaction, gasPrice });\n\t\tawait this.sign(ethTransaction, transactionMeta.transaction.from);\n\t\tconst rawTransaction = bufferToHex(ethTransaction.serialize());\n\t\tconst transactionHash = await this.query('sendRawTransaction', [rawTransaction]);\n\t\tconst newTransactionMeta = {\n\t\t\t...transactionMeta,\n\t\t\tid: random(),\n\t\t\ttime: Date.now(),\n\t\t\ttransaction: {\n\t\t\t\t...transactionMeta.transaction,\n\t\t\t\tgasPrice\n\t\t\t},\n\t\t\ttransactionHash\n\t\t};\n\t\ttransactions.push(newTransactionMeta);\n\t\tthis.update({ transactions: [...transactions] });\n\t\tthis.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n\t}\n\n\t/**\n\t * Estimates required gas for a given transaction\n\t *\n\t * @param transaction - Transaction object to estimate gas for\n\t * @returns - Promise resolving to an object containing gas and gasPrice\n\t */\n\tasync estimateGas(transaction: Transaction) {\n\t\tconst estimatedTransaction = { ...transaction };\n\t\tconst { gasLimit } = await this.query('getBlockByNumber', ['latest', false]);\n\t\tconst { gas, gasPrice: providedGasPrice, to, value, data } = estimatedTransaction;\n\t\tconst gasPrice = typeof providedGasPrice === 'undefined' ? await this.query('gasPrice') : providedGasPrice;\n\n\t\t// 1. If gas is already defined on the transaction, use it\n\t\tif (typeof gas !== 'undefined') {\n\t\t\treturn { gas, gasPrice };\n\t\t}\n\n\t\t// 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000\n\t\t/* istanbul ignore next */\n\t\tconst code = to ? await this.query('getCode', [to]) : undefined;\n\t\t/* istanbul ignore next */\n\t\tif (!to || (to && !data && (!code || code === '0x'))) {\n\t\t\treturn { gas: '0x5208', gasPrice };\n\t\t}\n\t\t// if data, should be hex string format\n\t\testimatedTransaction.data = !data ? data : /* istanbul ignore next */ addHexPrefix(data);\n\t\t// 3. If this is a contract address, safely estimate gas using RPC\n\t\testimatedTransaction.value = typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n\t\tconst gasLimitBN = hexToBN(gasLimit);\n\t\testimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\t\tconst gasHex = await this.query('estimateGas', [estimatedTransaction]);\n\n\t\t// 4. Pad estimated gas without exceeding the most recent block gasLimit\n\t\tconst gasBN = hexToBN(gasHex);\n\t\tconst maxGasBN = gasLimitBN.muln(0.9);\n\t\tconst paddedGasBN = gasBN.muln(1.5);\n\t\t/* istanbul ignore next */\n\t\tif (gasBN.gt(maxGasBN)) {\n\t\t\treturn { gas: addHexPrefix(gasHex), gasPrice };\n\t\t}\n\t\t/* istanbul ignore next */\n\t\tif (paddedGasBN.lt(maxGasBN)) {\n\t\t\treturn { gas: addHexPrefix(BNToHex(paddedGasBN)), gasPrice };\n\t\t}\n\t\treturn { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice };\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tsuper.onComposed();\n\t\tconst network = this.context.NetworkController as NetworkController;\n\t\tconst onProviderUpdate = () => {\n\t\t\tthis.ethQuery = network.provider ? new EthQuery(network.provider) : /* istanbul ignore next */ null;\n\t\t\tthis.registry = network.provider\n\t\t\t\t? new MethodRegistry({ provider: network.provider }) /* istanbul ignore next */\n\t\t\t\t: null;\n\t\t};\n\t\tonProviderUpdate();\n\t\tnetwork.subscribe(onProviderUpdate);\n\t}\n\n\t/**\n\t * Resiliently checks all submitted transactions on the blockchain\n\t * and verifies that it has been included in a block\n\t * when that happens, the tx status is updated to confirmed\n\t *\n\t * @returns - Promise resolving when this operation completes\n\t */\n\tasync queryTransactionStatuses() {\n\t\tconst { transactions } = this.state;\n\t\tconst network = this.context.NetworkController;\n\t\tconst currentNetworkID = network.state.network;\n\t\tlet gotUpdates = false;\n\t\tawait safelyExecute(() =>\n\t\t\tPromise.all(\n\t\t\t\ttransactions.map(async (meta, index) => {\n\t\t\t\t\tif (meta.status === 'submitted' && meta.networkID === currentNetworkID) {\n\t\t\t\t\t\tconst txObj = await this.query('getTransactionByHash', [meta.transactionHash]);\n\t\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\t\tif (txObj && txObj.blockNumber) {\n\t\t\t\t\t\t\ttransactions[index].status = 'confirmed';\n\t\t\t\t\t\t\tthis.hub.emit(`${meta.id}:confirmed`, meta);\n\t\t\t\t\t\t\tgotUpdates = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\t/* istanbul ignore else */\n\t\tif (gotUpdates) {\n\t\t\tthis.update({ transactions: [...transactions] });\n\t\t}\n\t}\n\n\t/**\n\t * Updates an existing transaction in state\n\t *\n\t * @param transactionMeta - New transaction meta to store in state\n\t */\n\tupdateTransaction(transactionMeta: TransactionMeta) {\n\t\tconst { transactions } = this.state;\n\t\ttransactionMeta.transaction = normalizeTransaction(transactionMeta.transaction);\n\t\tvalidateTransaction(transactionMeta.transaction);\n\t\tconst index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n\t\ttransactions[index] = transactionMeta;\n\t\tthis.update({ transactions: [...transactions] });\n\t}\n\n\t/**\n\t * Removes all transactions from state, optionally based on the current network\n\t *\n\t * @param ignoreNetwork - Ignores network\n\t */\n\twipeTransactions(ignoreNetwork?: boolean) {\n\t\t/* istanbul ignore next */\n\t\tif (ignoreNetwork) {\n\t\t\tthis.update({ transactions: [] });\n\t\t\treturn;\n\t\t}\n\t\tconst network = this.context.NetworkController as NetworkController;\n\t\tif (!network) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentNetworkID = network.state.network;\n\t\tconst newTransactions = this.state.transactions.filter(({ networkID }) => networkID !== currentNetworkID);\n\t\tthis.update({ transactions: newTransactions });\n\t}\n\n\t/**\n\t * Gets all transactions from etherscan for a specific address\n\t * optionally starting from a specific block\n\t *\n\t * @param address - string representing the address to fetch the transactions from\n\t * @param fromBlock - string representing the block number (optional)\n\t * @returns - Promise resolving to an string containing the block number of the latest incoming transaction.\n\t */\n\tasync fetchAll(address: string, fromBlock?: string): Promise<string | void> {\n\t\tconst network = this.context.NetworkController;\n\t\tconst currentNetworkID = network.state.network;\n\t\tconst networkType = network.state.provider.type;\n\n\t\tlet etherscanSubdomain = 'api';\n\t\tconst supportedNetworkIds = ['1', '3', '4', '42'];\n\t\t/* istanbul ignore next */\n\t\tif (supportedNetworkIds.indexOf(currentNetworkID) === -1) {\n\t\t\treturn;\n\t\t}\n\t\t/* istanbul ignore next */\n\t\tif (networkType !== 'mainnet') {\n\t\t\tetherscanSubdomain = `api-${networkType}`;\n\t\t}\n\t\tconst apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n\n\t\t/* istanbul ignore next */\n\t\tif (!apiUrl) {\n\t\t\treturn;\n\t\t}\n\t\tlet url = `${apiUrl}/api?module=account&action=txlist&address=${address}&tag=latest&page=1`;\n\t\t/* istanbul ignore next */\n\t\tif (fromBlock) {\n\t\t\turl += `&startBlock=${fromBlock}`;\n\t\t}\n\t\tconst parsedResponse = await handleFetch(url);\n\t\t/* istanbul ignore else */\n\t\tif (parsedResponse.status !== '0' && parsedResponse.result.length > 0) {\n\t\t\tconst remoteTxList: { [key: string]: number } = {};\n\t\t\tconst remoteTxs: TransactionMeta[] = [];\n\t\t\tparsedResponse.result.forEach((tx: EtherscanTransactionMeta) => {\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (!remoteTxList[tx.hash]) {\n\t\t\t\t\tremoteTxs.push(this.normalizeTxFromEtherscan(tx, currentNetworkID));\n\t\t\t\t\tremoteTxList[tx.hash] = 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst localTxs = this.state.transactions.filter(\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\t(tx: TransactionMeta) => !remoteTxList[`${tx.transactionHash}`]\n\t\t\t);\n\n\t\t\tconst allTxs = [...remoteTxs, ...localTxs];\n\t\t\tallTxs.sort((a, b) => (/* istanbul ignore next */ a.time < b.time ? -1 : 1));\n\n\t\t\tlet latestIncomingTxBlockNumber: string | undefined;\n\t\t\tallTxs.forEach(async (tx) => {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (\n\t\t\t\t\ttx.networkID === currentNetworkID &&\n\t\t\t\t\ttx.transaction.to &&\n\t\t\t\t\ttx.transaction.to.toLowerCase() === address.toLowerCase()\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttx.blockNumber &&\n\t\t\t\t\t\t(!latestIncomingTxBlockNumber ||\n\t\t\t\t\t\t\tparseInt(latestIncomingTxBlockNumber, 10) < parseInt(tx.blockNumber, 10))\n\t\t\t\t\t) {\n\t\t\t\t\t\tlatestIncomingTxBlockNumber = tx.blockNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (tx.toSmartContract === undefined) {\n\t\t\t\t\t// If not `to` is a contract deploy, if not `data` is send eth\n\t\t\t\t\tif (tx.transaction.to && (!tx.transaction.data || tx.transaction.data !== '0x')) {\n\t\t\t\t\t\tconst code = await this.query('getCode', [tx.transaction.to]);\n\t\t\t\t\t\ttx.toSmartContract = isSmartContractCode(code);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttx.toSmartContract = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.update({ transactions: allTxs });\n\t\t\treturn latestIncomingTxBlockNumber;\n\t\t}\n\t\t/* istanbul ignore next */\n\t\treturn;\n\t}\n}\n\nexport default TransactionController;\n"]}