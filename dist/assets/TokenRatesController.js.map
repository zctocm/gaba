{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../../src/assets/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toChecksumAddress } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport AssetsController from './AssetsController';\nimport { safelyExecute, handleFetch } from '../util';\nimport CurrencyRateController from './CurrencyRateController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n *\n */\nexport interface CoinGeckoResponse {\n\t[address: string]: {\n\t\t[currency: string]: number;\n\t};\n}\n\n/**\n * @type Token\n *\n * Token representation\n *\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\nexport interface Token {\n\taddress: string;\n\tdecimals: number;\n\tsymbol: string;\n\timage?: string;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n *\n * @property interval - Polling interval used to fetch new token rates\n * @property tokens - List of tokens to track exchange rates for\n */\nexport interface TokenRatesConfig extends BaseConfig {\n\tinterval: number;\n\tnativeCurrency: string;\n\ttokens: Token[];\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n *\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n */\nexport interface TokenRatesState extends BaseState {\n\tcontractExchangeRates: { [address: string]: number };\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the AssetsController\n */\nexport class TokenRatesController extends BaseController<TokenRatesConfig, TokenRatesState> {\n\tprivate handle?: NodeJS.Timer;\n\tprivate tokenList: Token[] = [];\n\n\tprivate getPricingURL(query: string) {\n\t\treturn `https://api.coingecko.com/api/v3/simple/token_price/ethereum?${query}`;\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'TokenRatesController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = ['AssetsController', 'CurrencyRateController'];\n\n\t/**\n\t * Creates a TokenRatesController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<TokenRatesConfig>, state?: Partial<TokenRatesState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tdisabled: true,\n\t\t\tinterval: 180000,\n\t\t\tnativeCurrency: 'eth',\n\t\t\ttokens: []\n\t\t};\n\t\tthis.defaultState = { contractExchangeRates: {} };\n\t\tthis.initialize();\n\t\tthis.configure({ disabled: false }, false, false);\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Sets a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new token rates\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updateExchangeRates());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Sets a new token list to track prices\n\t *\n\t * @param tokens - List of tokens to track exchange rates for\n\t */\n\tset tokens(tokens: Token[]) {\n\t\tthis.tokenList = tokens;\n\t\t!this.disabled && safelyExecute(() => this.updateExchangeRates());\n\t}\n\n\t/**\n\t * Fetches a pairs of token address and native currency\n\t *\n\t * @param query - Query according to tokens in tokenList and native currency\n\t * @returns - Promise resolving to exchange rates for given pairs\n\t */\n\tasync fetchExchangeRate(query: string): Promise<CoinGeckoResponse> {\n\t\treturn handleFetch(this.getPricingURL(query));\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tsuper.onComposed();\n\t\tconst assets = this.context.AssetsController as AssetsController;\n\t\tconst currencyRate = this.context.CurrencyRateController as CurrencyRateController;\n\t\tassets.subscribe(() => {\n\t\t\tthis.configure({ tokens: assets.state.tokens });\n\t\t});\n\t\tcurrencyRate.subscribe(() => {\n\t\t\tthis.configure({ nativeCurrency: currencyRate.state.nativeCurrency });\n\t\t});\n\t}\n\n\t/**\n\t * Updates exchange rates for all tokens\n\t *\n\t * @returns Promise resolving when this operation completes\n\t */\n\tasync updateExchangeRates() {\n\t\tif (this.tokenList.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst newContractExchangeRates: { [address: string]: number } = {};\n\t\tconst { nativeCurrency } = this.config;\n\t\tconst pairs = this.tokenList.map((token) => token.address).join(',');\n\t\tconst query = `contract_addresses=${pairs}&vs_currencies=${nativeCurrency.toLowerCase()}`;\n\t\tconst prices = await this.fetchExchangeRate(query);\n\t\tthis.tokenList.forEach((token) => {\n\t\t\tconst address = toChecksumAddress(token.address);\n\t\t\tconst price = prices[token.address.toLowerCase()];\n\t\t\tnewContractExchangeRates[address] = price ? price[nativeCurrency.toLowerCase()] : 0;\n\t\t});\n\t\tthis.update({ contractExchangeRates: newContractExchangeRates });\n\t}\n}\n\nexport default TokenRatesController;\n"]}