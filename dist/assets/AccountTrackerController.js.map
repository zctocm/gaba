{"version":3,"file":"AccountTrackerController.js","sourceRoot":"","sources":["../../src/assets/AccountTrackerController.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport PreferencesController from '../user/PreferencesController';\nimport { BNToHex, safelyExecute } from '../util';\n\nconst EthjsQuery = require('ethjs-query');\n\n/**\n * @type AccountInformation\n *\n * Account information object\n *\n * @property balance - Hex string of an account balancec in wei\n */\nexport interface AccountInformation {\n\tbalance: string;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n *\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\nexport interface AccountTrackerConfig extends BaseConfig {\n\tinterval: number;\n\tprovider?: any;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n *\n * @property accounts - Map of addresses to account information\n */\nexport interface AccountTrackerState extends BaseState {\n\taccounts: { [address: string]: AccountInformation };\n}\n\n/**\n * Controller that tracks information for all accounts in the current keychain\n */\nexport class AccountTrackerController extends BaseController<AccountTrackerConfig, AccountTrackerState> {\n\tprivate ethjsQuery: any;\n\tprivate handle?: NodeJS.Timer;\n\n\tprivate syncAccounts() {\n\t\tconst {\n\t\t\tstate: { identities }\n\t\t} = this.context.PreferencesController as PreferencesController;\n\t\tconst { accounts } = this.state;\n\t\tconst addresses = Object.keys(identities);\n\t\tconst existing = Object.keys(accounts);\n\t\tconst newAddresses = addresses.filter((address) => existing.indexOf(address) === -1);\n\t\tconst oldAddresses = existing.filter((address) => addresses.indexOf(address) === -1);\n\t\tnewAddresses.forEach((address) => {\n\t\t\taccounts[address] = { balance: '0x0' };\n\t\t});\n\t\toldAddresses.forEach((address) => {\n\t\t\tdelete accounts[address];\n\t\t});\n\t\tthis.update({ accounts: { ...accounts } });\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'AccountTrackerController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = ['PreferencesController'];\n\n\t/**\n\t * Creates an AccountTracker instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<AccountTrackerConfig>, state?: Partial<AccountTrackerState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tinterval: 10000\n\t\t};\n\t\tthis.defaultState = { accounts: {} };\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Sets a new provider\n\t *\n\t * @param provider - Provider used to create a new underlying EthQuery instance\n\t */\n\tset provider(provider: any) {\n\t\tthis.ethjsQuery = new EthjsQuery(provider);\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tsuper.onComposed();\n\t\tconst preferences = this.context.PreferencesController as PreferencesController;\n\t\tpreferences.subscribe(this.refresh);\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval trigger a 'refresh'\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.refresh());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Refreshes all accounts in the current keychain\n\t */\n\trefresh = async () => {\n\t\tthis.syncAccounts();\n\t\tconst { accounts } = this.state;\n\t\tfor (const address in accounts) {\n\t\t\tawait safelyExecute(async () => {\n\t\t\t\tconst balance = await this.ethjsQuery.getBalance(address);\n\t\t\t\taccounts[address] = { balance: BNToHex(balance) };\n\t\t\t\tthis.update({ accounts: { ...accounts } });\n\t\t\t});\n\t\t}\n\t\t/* tslint:disable-next-line */\n\t};\n}\n\nexport default AccountTrackerController;\n"]}