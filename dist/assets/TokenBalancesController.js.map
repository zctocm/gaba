{"version":3,"file":"TokenBalancesController.js","sourceRoot":"","sources":["../../src/assets/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sDAA0E;AAG1E,kCAAwC;AAGxC,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAEjC,gBAAE;AA0BX;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,wBAAuD;IAanG;;;;;OAKG;IACH,YAAY,MAAqC,EAAE,KAAmC;QACrF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAjBtB;;WAEG;QACH,SAAI,GAAG,yBAAyB,CAAC;QAEjC;;WAEG;QACH,wBAAmB,GAAG,CAAC,0BAA0B,EAAE,kBAAkB,CAAC,CAAC;QAUtE,IAAI,CAAC,aAAa,GAAG;YACpB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,EAAE;SACV,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC3B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;KAAA;IAED;;;;OAIG;IACG,cAAc;;YACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO;aACP;YACD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,wBAAoD,CAAC;YACzF,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAoC,CAAC;YACjE,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;YAC1C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;YAC/B,MAAM,mBAAmB,GAAqC,EAAE,CAAC;YACjE,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACvB,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAClC,mBAAmB,CAAC,OAAO,CAAC,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;aAC3F;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACxD,CAAC;KAAA;IAED;;;OAGG;IACH,UAAU;QACT,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAoC,CAAC;QACjE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AA7ED,0DA6EC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport AssetsController from './AssetsController';\nimport { Token } from './TokenRatesController';\nimport { safelyExecute } from '../util';\nimport { AssetsContractController } from './AssetsContractController';\n\nconst { BN } = require('ethereumjs-util');\n\nexport { BN };\n\n/**\n * @type TokenBalancesConfig\n *\n * Token balances controller configuration\n *\n * @property interval - Polling interval used to fetch new token balances\n * @property tokens - List of tokens to track balances for\n */\nexport interface TokenBalancesConfig extends BaseConfig {\n\tinterval: number;\n\ttokens: Token[];\n}\n\n/**\n * @type TokenBalancesState\n *\n * Token balances controller state\n *\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport interface TokenBalancesState extends BaseState {\n\tcontractBalances: { [address: string]: typeof BN };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the AssetsController\n */\nexport class TokenBalancesController extends BaseController<TokenBalancesConfig, TokenBalancesState> {\n\tprivate handle?: NodeJS.Timer;\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'TokenBalancesController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = ['AssetsContractController', 'AssetsController'];\n\n\t/**\n\t * Creates a TokenBalancesController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<TokenBalancesConfig>, state?: Partial<TokenBalancesState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tinterval: 180000,\n\t\t\ttokens: []\n\t\t};\n\t\tthis.defaultState = { contractBalances: {} };\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new token balances\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updateBalances());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Updates balances for all tokens\n\t *\n\t * @returns Promise resolving when this operation completes\n\t */\n\tasync updateBalances() {\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\t\tconst assetsContract = this.context.AssetsContractController as AssetsContractController;\n\t\tconst assets = this.context.AssetsController as AssetsController;\n\t\tconst { selectedAddress } = assets.config;\n\t\tconst { tokens } = this.config;\n\t\tconst newContractBalances: { [address: string]: typeof BN } = {};\n\t\tfor (const i in tokens) {\n\t\t\tconst address = tokens[i].address;\n\t\t\tnewContractBalances[address] = await assetsContract.getBalanceOf(address, selectedAddress);\n\t\t}\n\t\tthis.update({ contractBalances: newContractBalances });\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tsuper.onComposed();\n\t\tconst assets = this.context.AssetsController as AssetsController;\n\t\tassets.subscribe(({ tokens }) => {\n\t\t\tthis.configure({ tokens });\n\t\t\tthis.updateBalances();\n\t\t});\n\t}\n}\n\nexport default TokenBalancesController;\n"]}