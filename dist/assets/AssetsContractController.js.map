{"version":3,"file":"AssetsContractController.js","sourceRoot":"","sources":["../../src/assets/AssetsContractController.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\n\nconst BN = require('ethereumjs-util').BN;\nconst Web3 = require('web3');\nconst abiERC20 = require('human-standard-token-abi');\nconst abiERC721 = require('human-standard-collectible-abi');\nconst abiSingleCallBalancesContract = require('single-call-balance-checker-abi');\nconst ERC721METADATA_INTERFACE_ID = '0x5b5e139f';\nconst ERC721ENUMERABLE_INTERFACE_ID = '0x780e9d63';\nconst SINGLE_CALL_BALANCES_ADDRESS = '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39';\n\n/**\n * @type AssetsContractConfig\n *\n * Assets Contract controller configuration\n *\n * @property provider - Provider used to create a new web3 instance\n */\nexport interface AssetsContractConfig extends BaseConfig {\n\tprovider: any;\n}\n\n/**\n * @type BalanceMap\n *\n * Key value object containing the balance for each tokenAddress\n *\n * @property [tokenAddress] - Address of the token\n */\nexport interface BalanceMap {\n\t[tokenAddress: string]: string;\n}\n\n/**\n * Controller that interacts with contracts on mainnet through web3\n */\nexport class AssetsContractController extends BaseController<AssetsContractConfig, BaseState> {\n\tprivate web3: any;\n\n\t/**\n\t *\n\t * Query if a contract implements an interface\n\t *\n\t * @param address - Asset contract address\n\t * @param interfaceId - Interface identifier\n\t * @returns - Promise resolving to whether the contract implements `interfaceID`\n\t */\n\tprivate async contractSupportsInterface(address: string, interfaceId: string): Promise<boolean> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<boolean>((resolve, reject) => {\n\t\t\tcontract.supportsInterface(interfaceId, (error: Error, result: boolean) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'AssetsContractController';\n\n\t/**\n\t * Creates a AssetsContractController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<AssetsContractConfig>, state?: Partial<BaseState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tprovider: undefined\n\t\t};\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Sets a new provider\n\t *\n\t * @property provider - Provider used to create a new underlying Web3 instance\n\t */\n\tset provider(provider: any) {\n\t\tthis.web3 = new Web3(provider);\n\t}\n\n\t/**\n\t * Query if contract implements ERC721Metadata interface\n\t *\n\t * @param address - ERC721 asset contract address\n\t * @returns - Promise resolving to whether the contract implements ERC721Metadata interface\n\t */\n\tasync contractSupportsMetadataInterface(address: string): Promise<boolean> {\n\t\treturn this.contractSupportsInterface(address, ERC721METADATA_INTERFACE_ID);\n\t}\n\n\t/**\n\t * Query if contract implements ERC721Enumerable interface\n\t *\n\t * @param address - ERC721 asset contract address\n\t * @returns - Promise resolving to whether the contract implements ERC721Enumerable interface\n\t */\n\tasync contractSupportsEnumerableInterface(address: string): Promise<boolean> {\n\t\treturn this.contractSupportsInterface(address, ERC721ENUMERABLE_INTERFACE_ID);\n\t}\n\n\t/**\n\t * Get balance or count for current account on specific asset contract\n\t *\n\t * @param address - Asset contract address\n\t * @param selectedAddress - Current account public address\n\t * @returns - Promise resolving to BN object containing balance for current account on specific asset contract\n\t */\n\tasync getBalanceOf(address: string, selectedAddress: string): Promise<typeof BN> {\n\t\tconst contract = this.web3.eth.contract(abiERC20).at(address);\n\t\treturn new Promise<typeof BN>((resolve, reject) => {\n\t\t\tcontract.balanceOf(selectedAddress, (error: Error, result: typeof BN) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Enumerate assets assigned to an owner\n\t *\n\t * @param address - ERC721 asset contract address\n\t * @param selectedAddress - Current account public address\n\t * @param index - A collectible counter less than `balanceOf(selectedAddress)`\n\t * @returns - Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'\n\t */\n\tgetCollectibleTokenId(address: string, selectedAddress: string, index: number): Promise<number> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tcontract.tokenOfOwnerByIndex(selectedAddress, index, (error: Error, result: typeof BN) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result.toNumber());\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Query for tokenURI for a given asset\n\t *\n\t * @param address - ERC721 asset contract address\n\t * @param tokenId - ERC721 asset identifier\n\t * @returns - Promise resolving to the 'tokenURI'\n\t */\n\tasync getCollectibleTokenURI(address: string, tokenId: number): Promise<string> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tcontract.tokenURI(tokenId, (error: Error, result: string) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Query for name for a given ERC20 asset\n\t *\n\t * @param address - ERC20 asset contract address\n\t * @returns - Promise resolving to the 'decimals'\n\t */\n\tasync getTokenDecimals(address: string): Promise<string> {\n\t\tconst contract = this.web3.eth.contract(abiERC20).at(address);\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tcontract.decimals((error: Error, result: string) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Query for name for a given asset\n\t *\n\t * @param address - ERC721 or ERC20 asset contract address\n\t * @returns - Promise resolving to the 'name'\n\t */\n\tasync getAssetName(address: string): Promise<string> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tcontract.name((error: Error, result: string) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Query for symbol for a given asset\n\t *\n\t * @param address - ERC721 or ERC20 asset contract address\n\t * @returns - Promise resolving to the 'symbol'\n\t */\n\tasync getAssetSymbol(address: string): Promise<string> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tcontract.symbol((error: Error, result: string) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Query for owner for a given ERC721 asset\n\t *\n\t * @param address - ERC721 asset contract address\n\t * @param tokenId - ERC721 asset identifier\n\t * @returns - Promise resolving to the owner address\n\t */\n\tasync getOwnerOf(address: string, tokenId: number): Promise<string> {\n\t\tconst contract = this.web3.eth.contract(abiERC721).at(address);\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tcontract.ownerOf(tokenId, (error: Error, result: string) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns contract instance of\n\t *\n\t * @returns - Promise resolving to the 'tokenURI'\n\t */\n\tasync getBalancesInSingleCall(selectedAddress: string, tokensToDetect: string[]) {\n\t\tconst contract = this.web3.eth.contract(abiSingleCallBalancesContract).at(SINGLE_CALL_BALANCES_ADDRESS);\n\t\treturn new Promise<BalanceMap>((resolve, reject) => {\n\t\t\tcontract.balances([selectedAddress], tokensToDetect, (error: Error, result: Array<typeof BN>) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst nonZeroBalances: BalanceMap = {};\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (result.length > 0) {\n\t\t\t\t\ttokensToDetect.forEach((tokenAddress, index) => {\n\t\t\t\t\t\tconst balance: typeof BN = result[index];\n\t\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\t\tif (!balance.isZero()) {\n\t\t\t\t\t\t\tnonZeroBalances[tokenAddress] = balance;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresolve(nonZeroBalances);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport default AssetsContractController;\n"]}