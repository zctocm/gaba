{"version":3,"file":"CurrencyRateController.js","sourceRoot":"","sources":["../../src/assets/CurrencyRateController.ts"],"names":[],"mappings":"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","sourcesContent":["const Mutex = require('await-semaphore').Mutex;\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\n/**\n * @type CurrencyRateConfig\n *\n * Currency rate controller configuration\n *\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property interval - Polling interval used to fetch new currency rate\n * @property nativeCurrency - Symbol for the base asset used for conversion\n */\nexport interface CurrencyRateConfig extends BaseConfig {\n\tcurrentCurrency: string;\n\tinterval: number;\n\tnativeCurrency: string;\n}\n\n/**\n * @type CurrencyRateState\n *\n * Currency rate controller state\n *\n * @property conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch\n * @property conversionRate - Conversion rate from current base asset to the current currency\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property nativeCurrency - Symbol for the base asset used for conversion\n */\nexport interface CurrencyRateState extends BaseState {\n\tconversionDate: number;\n\tconversionRate: number;\n\tcurrentCurrency: string;\n\tnativeCurrency: string;\n}\n\n/**\n * Controller that passively polls on a set interval for an exchange rate from the current base\n * asset to the current currency\n */\nexport class CurrencyRateController extends BaseController<CurrencyRateConfig, CurrencyRateState> {\n\tprivate activeCurrency = '';\n\tprivate activeNativeCurrency = '';\n\tprivate mutex = new Mutex();\n\tprivate handle?: NodeJS.Timer;\n\n\tprivate getCurrentCurrencyFromState(state?: Partial<CurrencyRateState>) {\n\t\treturn (state && state.currentCurrency) ? state.currentCurrency : 'usd';\n\t}\n\n\tprivate getPricingURL(currentCurrency: string, nativeCurrency: string) {\n\t\treturn (\n\t\t\t`https://min-api.cryptocompare.com/data/price?fsym=` +\n\t\t\t`${nativeCurrency.toUpperCase()}&tsyms=${currentCurrency.toUpperCase()}`\n\t\t);\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'CurrencyRateController';\n\n\t/**\n\t * Creates a CurrencyRateController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<CurrencyRateConfig>, state?: Partial<CurrencyRateState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tcurrentCurrency: this.getCurrentCurrencyFromState(state),\n\t\t\tdisabled: true,\n\t\t\tinterval: 180000,\n\t\t\tnativeCurrency: 'CFX'\n\t\t};\n\t\tthis.defaultState = {\n\t\t\tconversionDate: 0,\n\t\t\tconversionRate: 0,\n\t\t\tcurrentCurrency: this.defaultConfig.currentCurrency,\n\t\t\tnativeCurrency: this.defaultConfig.nativeCurrency\n\t\t};\n\t\tthis.initialize();\n\t\tthis.configure({ disabled: false }, false, false);\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Sets a currency to track\n\t *\n\t * @param currentCurrency - ISO 4217 currency code\n\t */\n\tset currentCurrency(currentCurrency: string) {\n\t\tthis.activeCurrency = currentCurrency;\n\t\tsafelyExecute(() => this.updateExchangeRate());\n\t}\n\n\t/**\n\t * Sets a new native currency\n\t *\n\t * @param symbol - Symbol for the base asset\n\t */\n\tset nativeCurrency(symbol: string) {\n\t\tthis.activeNativeCurrency = symbol;\n\t\tsafelyExecute(() => this.updateExchangeRate());\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new exchange rate\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updateExchangeRate());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Fetches the exchange rate for a given currency\n\t *\n\t * @param currency - ISO 4217 currency code\n\t * @param nativeCurrency - Symbol for base asset\n\t * @returns - Promise resolving to exchange rate for given currency\n\t */\n\tasync fetchExchangeRate(currency: string, nativeCurrency = this.activeNativeCurrency): Promise<CurrencyRateState> {\n\t\tconst json = await handleFetch(this.getPricingURL(currency, nativeCurrency));\n\t\treturn {\n\t\t\tconversionDate: Date.now() / 1000,\n\t\t\tconversionRate: Number(json[currency.toUpperCase()]),\n\t\t\tcurrentCurrency: currency,\n\t\t\tnativeCurrency\n\t\t};\n\t}\n\n\t/**\n\t * Updates exchange rate for the current currency\n\t *\n\t * @returns Promise resolving to currency data or undefined if disabled\n\t */\n\tasync updateExchangeRate(): Promise<CurrencyRateState | void> {\n\t\tif (this.disabled || !this.activeCurrency || !this.activeNativeCurrency) {\n\t\t\treturn;\n\t\t}\n\t\tconst releaseLock = await this.mutex.acquire();\n\t\tconst { conversionDate, conversionRate } = await this.fetchExchangeRate(\n\t\t\tthis.activeCurrency,\n\t\t\tthis.activeNativeCurrency\n\t\t);\n\t\tthis.update({\n\t\t\tconversionDate,\n\t\t\tconversionRate,\n\t\t\tcurrentCurrency: this.activeCurrency,\n\t\t\tnativeCurrency: this.activeNativeCurrency\n\t\t});\n\t\treleaseLock();\n\t\treturn this.state;\n\t}\n}\n\nexport default CurrencyRateController;\n"]}