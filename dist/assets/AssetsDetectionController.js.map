{"version":3,"file":"AssetsDetectionController.js","sourceRoot":"","sources":["../../src/assets/AssetsDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toChecksumAddress } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport AssetsController from './AssetsController';\nimport NetworkController from '../network/NetworkController';\nimport PreferencesController from '../user/PreferencesController';\nimport AssetsContractController from './AssetsContractController';\nimport { safelyExecute, timeoutFetch } from '../util';\nimport { Token } from './TokenRatesController';\nimport { NetworkType } from '../network/NetworkController';\n\nconst contractMap = require('eth-contract-metadata');\nconst DEFAULT_INTERVAL = 180000;\nconst MAINNET = 'mainnet';\n\n/**\n * @type ApiCollectibleResponse\n *\n * Collectible object coming from OpenSea api\n *\n * @property token_id - The collectible identifier\n * @property image_original_url - URI of collectible image associated with this collectible\n * @property name - The collectible name\n * @property description - The collectible description\n * @property assetContract - The collectible contract basic information, in this case the address\n */\nexport interface ApiCollectibleResponse {\n\ttoken_id: string;\n\timage_original_url: string;\n\tname: string;\n\tdescription: string;\n\tasset_contract: { [address: string]: string };\n}\n\n/**\n * @type AssetsConfig\n *\n * Assets controller configuration\n *\n * @property interval - Polling interval used to fetch new token rates\n * @property networkType - Network type ID as per net_version\n * @property selectedAddress - Vault selected address\n * @property tokens - List of tokens associated with the active vault\n */\nexport interface AssetsDetectionConfig extends BaseConfig {\n\tinterval: number;\n\tnetworkType: NetworkType;\n\tselectedAddress: string;\n\ttokens: Token[];\n}\n\n/**\n * Controller that passively polls on a set interval for assets auto detection\n */\nexport class AssetsDetectionController extends BaseController<AssetsDetectionConfig, BaseState> {\n\tprivate handle?: NodeJS.Timer;\n\n\tprivate getOwnerCollectiblesApi(address: string) {\n\t\treturn `https://api.opensea.io/api/v1/assets?owner=${address}&limit=300`;\n\t}\n\n\tprivate async getOwnerCollectibles() {\n\t\tconst { selectedAddress } = this.config;\n\t\tconst api = this.getOwnerCollectiblesApi(selectedAddress);\n\t\tconst assetsController = this.context.AssetsController as AssetsController;\n\t\tlet response: Response;\n\t\ttry {\n\t\t\t/* istanbul ignore if */\n\t\t\tif (assetsController.openSeaApiKey) {\n\t\t\t\tresponse = await timeoutFetch(api, { headers: { 'X-API-KEY': assetsController.openSeaApiKey } }, 15000);\n\t\t\t} else {\n\t\t\t\tresponse = await timeoutFetch(api, {}, 15000);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t/* istanbul ignore next */\n\t\t\treturn [];\n\t\t}\n\t\tconst collectiblesArray = await response.json();\n\t\tconst collectibles = collectiblesArray.assets;\n\t\treturn collectibles;\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'AssetsDetectionController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers = [\n\t\t'AssetsContractController',\n\t\t'AssetsController',\n\t\t'NetworkController',\n\t\t'PreferencesController'\n\t];\n\n\t/**\n\t * Creates a AssetsDetectionController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<AssetsDetectionConfig>, state?: Partial<BaseState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = {\n\t\t\tinterval: DEFAULT_INTERVAL,\n\t\t\tnetworkType: 'mainnet',\n\t\t\tselectedAddress: '',\n\t\t\ttokens: []\n\t\t};\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to auto detect assets\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait this.detectAssets();\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Checks whether network is mainnet or not\n\t *\n\t * @returns - Whether current network is mainnet\n\t */\n\tisMainnet() {\n\t\tif (this.config.networkType !== MAINNET || this.disabled) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Detect assets owned by current account on mainnet\n\t */\n\tasync detectAssets() {\n\t\t/* istanbul ignore if */\n\t\tif (!this.isMainnet()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.detectTokens();\n\t\tthis.detectCollectibles();\n\t}\n\n\t/**\n\t * Triggers asset ERC20 token auto detection for each contract address in contract metadata on mainnet\n\t */\n\tasync detectTokens() {\n\t\t/* istanbul ignore if */\n\t\tif (!this.isMainnet()) {\n\t\t\treturn;\n\t\t}\n\t\tconst tokensAddresses = this.config.tokens.filter(/* istanbul ignore next*/ (token) => token.address);\n\t\tconst tokensToDetect: string[] = [];\n\t\tfor (const address in contractMap) {\n\t\t\tconst contract = contractMap[address];\n\t\t\tif (contract.erc20 && !(address in tokensAddresses)) {\n\t\t\t\ttokensToDetect.push(address);\n\t\t\t}\n\t\t}\n\n\t\tconst assetsContractController = this.context.AssetsContractController as AssetsContractController;\n\t\tconst { selectedAddress } = this.config;\n\t\t/* istanbul ignore else */\n\t\tif (!selectedAddress) {\n\t\t\treturn;\n\t\t}\n\t\tawait safelyExecute(async () => {\n\t\t\tconst balances = await assetsContractController.getBalancesInSingleCall(selectedAddress, tokensToDetect);\n\t\t\tconst assetsController = this.context.AssetsController as AssetsController;\n\t\t\tconst { ignoredTokens } = assetsController.state;\n\t\t\tfor (const tokenAddress in balances) {\n\t\t\t\tlet ignored;\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (ignoredTokens.length) {\n\t\t\t\t\tignored = ignoredTokens.find((token) => token.address === toChecksumAddress(tokenAddress));\n\t\t\t\t}\n\t\t\t\tif (!ignored) {\n\t\t\t\t\tawait assetsController.addToken(\n\t\t\t\t\t\ttokenAddress,\n\t\t\t\t\t\tcontractMap[tokenAddress].symbol,\n\t\t\t\t\t\tcontractMap[tokenAddress].decimals\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Triggers asset ERC721 token auto detection on mainnet\n\t * adding new collectibles and removing not owned collectibles\n\t */\n\tasync detectCollectibles() {\n\t\t/* istanbul ignore if */\n\t\tif (!this.isMainnet()) {\n\t\t\treturn;\n\t\t}\n\t\tconst { selectedAddress } = this.config;\n\t\t/* istanbul ignore else */\n\t\tif (!selectedAddress) {\n\t\t\treturn;\n\t\t}\n\t\tawait safelyExecute(async () => {\n\t\t\tconst assetsController = this.context.AssetsController as AssetsController;\n\t\t\tconst { ignoredCollectibles } = assetsController.state;\n\t\t\tlet collectiblesToRemove = assetsController.state.collectibles;\n\t\t\tconst apiCollectibles = await this.getOwnerCollectibles();\n\t\t\tconst addCollectiblesPromises = apiCollectibles.map(async (collectible: ApiCollectibleResponse) => {\n\t\t\t\tconst {\n\t\t\t\t\ttoken_id,\n\t\t\t\t\timage_original_url,\n\t\t\t\t\tname,\n\t\t\t\t\tdescription,\n\t\t\t\t\tasset_contract: { address }\n\t\t\t\t} = collectible;\n\n\t\t\t\tlet ignored;\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (ignoredCollectibles.length) {\n\t\t\t\t\tignored = ignoredCollectibles.find((c) => {\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\treturn c.address === toChecksumAddress(address) && c.tokenId === Number(token_id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (!ignored) {\n\t\t\t\t\tawait assetsController.addCollectible(\n\t\t\t\t\t\taddress,\n\t\t\t\t\t\tNumber(token_id),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\timage: image_original_url,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tcollectiblesToRemove = collectiblesToRemove.filter((c) => {\n\t\t\t\t\treturn !(c.tokenId === Number(token_id) && c.address === toChecksumAddress(address));\n\t\t\t\t});\n\t\t\t});\n\t\t\tawait Promise.all(addCollectiblesPromises);\n\t\t\tcollectiblesToRemove.forEach(({ address, tokenId }) => {\n\t\t\t\tassetsController.removeCollectible(address, tokenId);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tsuper.onComposed();\n\t\tconst preferences = this.context.PreferencesController as PreferencesController;\n\t\tconst network = this.context.NetworkController as NetworkController;\n\t\tconst assets = this.context.AssetsController as AssetsController;\n\t\tassets.subscribe(({ tokens }) => {\n\t\t\tthis.configure({ tokens });\n\t\t});\n\t\tpreferences.subscribe(({ selectedAddress }) => {\n\t\t\tconst actualSelectedAddress = this.config.selectedAddress;\n\t\t\tif (selectedAddress !== actualSelectedAddress) {\n\t\t\t\tthis.configure({ selectedAddress });\n\t\t\t\tthis.detectAssets();\n\t\t\t}\n\t\t});\n\t\tnetwork.subscribe(({ provider }) => {\n\t\t\tthis.configure({ networkType: provider.type });\n\t\t});\n\t}\n}\n\nexport default AssetsDetectionController;\n"]}