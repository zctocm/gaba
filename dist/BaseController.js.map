{"version":3,"file":"BaseController.js","sourceRoot":"","sources":["../src/BaseController.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildControllerContext } from './ComposableController';\n\n/**\n * State change callbacks\n */\nexport type Listener<T> = (state: T) => void;\n\n/**\n * @type BaseConfig\n *\n * Base controller configuration\n *\n * @property disabled - Determines if this controller is enabled\n */\nexport interface BaseConfig {\n\tdisabled?: boolean;\n}\n\n/**\n * @type BaseState\n *\n * Base state representation\n *\n * @property name - Unique name for this controller\n */\nexport interface BaseState {\n\tname?: string;\n}\n\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */\nexport class BaseController<C extends BaseConfig, S extends BaseState> {\n\t/**\n\t * Map of all sibling child controllers keyed by name if this\n\t * controller is composed using a ComposableController, allowing\n\t * any API on any sibling controller to be accessed\n\t */\n\tcontext: ChildControllerContext = {};\n\n\t/**\n\t * Default options used to configure this controller\n\t */\n\tdefaultConfig: C = {} as C;\n\n\t/**\n\t * Default state set on this controller\n\t */\n\tdefaultState: S = {} as S;\n\n\t/**\n\t * Determines if listeners are notified of state changes\n\t */\n\tdisabled = false;\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'BaseController';\n\n\t/**\n\t * List of required sibling controllers this controller needs to function\n\t */\n\trequiredControllers: string[] = [];\n\n\tprivate initialConfig: C;\n\tprivate initialState: S;\n\tprivate internalConfig: C = this.defaultConfig;\n\tprivate internalState: S = this.defaultState;\n\tprivate internalListeners: Array<Listener<S>> = [];\n\n\t/**\n\t * Creates a BaseController instance. Both initial state and initial\n\t * configuration options are merged with defaults upon initialization.\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config: Partial<C> = {} as C, state: Partial<S> = {} as S) {\n\t\t// Use assign since generics can't be spread: https://git.io/vpRhY\n\t\t/* tslint:disable:prefer-object-spread */\n\t\tthis.initialState = state as S;\n\t\tthis.initialConfig = config as C;\n\t}\n\n\t/**\n\t * Enables the controller. This sets each config option as a member\n\t * variable on this instance and triggers any defined setters. This\n\t * also sets initial state and triggers any listeners.\n\t *\n\t * @returns - This controller instance\n\t */\n\tprotected initialize() {\n\t\tthis.internalState = this.defaultState;\n\t\tthis.internalConfig = this.defaultConfig;\n\t\tthis.configure(this.initialConfig);\n\t\tthis.update(this.initialState);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves current controller configuration options\n\t *\n\t * @returns - Current configuration\n\t */\n\tget config() {\n\t\treturn this.internalConfig;\n\t}\n\n\t/**\n\t * Retrieves current controller state\n\t *\n\t * @returns - Current state\n\t */\n\tget state() {\n\t\treturn this.internalState;\n\t}\n\n\t/**\n\t * Updates controller configuration\n\t *\n\t * @param config - New configuration options\n\t * @param overwrite - Overwrite config instead of merging\n\t * @param fullUpdate - Boolean that defines if the update is partial or not\n\t */\n\tconfigure(config: Partial<C>, overwrite = false, fullUpdate = true) {\n\t\tif (fullUpdate) {\n\t\t\tthis.internalConfig = overwrite ? (config as C) : Object.assign(this.internalConfig, config);\n\n\t\t\tfor (const key in this.internalConfig) {\n\t\t\t\tif (typeof this.internalConfig[key] !== 'undefined') {\n\t\t\t\t\t(this as any)[key as string] = this.internalConfig[key];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const key in config) {\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (typeof this.internalConfig[key] !== 'undefined') {\n\t\t\t\t\tthis.internalConfig[key] = config[key] as any;\n\t\t\t\t\t(this as any)[key as string] = config[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Notifies all subscribed listeners of current state\n\t */\n\tnotify() {\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.internalListeners.forEach((listener) => {\n\t\t\tlistener(this.internalState);\n\t\t});\n\t}\n\n\t/**\n\t * Extension point called if and when this controller is composed\n\t * with other controllers using a ComposableController\n\t */\n\tonComposed() {\n\t\tthis.requiredControllers.forEach((name) => {\n\t\t\tif (!this.context[name]) {\n\t\t\t\tthrow new Error(`${this.name} must be composed with ${name}.`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Adds new listener to be notified of state changes\n\t *\n\t * @param listener - Callback triggered when state changes\n\t */\n\tsubscribe(listener: Listener<S>) {\n\t\tthis.internalListeners.push(listener);\n\t}\n\n\t/**\n\t * Removes existing listener from receiving state changes\n\t *\n\t * @param listener - Callback to remove\n\t * @returns - True if a listener is found and unsubscribed\n\t */\n\tunsubscribe(listener: Listener<S>) {\n\t\tconst index = this.internalListeners.findIndex((cb) => listener === cb);\n\t\tindex > -1 && this.internalListeners.splice(index, 1);\n\t\treturn index > -1;\n\t}\n\n\t/**\n\t * Updates controller state\n\t *\n\t * @param state - New state\n\t * @param overwrite - Overwrite state instead of merging\n\t */\n\tupdate(state: Partial<S>, overwrite = false) {\n\t\tthis.internalState = overwrite ? Object.assign({}, state as S) : Object.assign({}, this.internalState, state);\n\t\tthis.notify();\n\t}\n}\n\nexport default BaseController;\n"]}