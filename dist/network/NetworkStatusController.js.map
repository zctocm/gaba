{"version":3,"file":"NetworkStatusController.js","sourceRoot":"","sources":["../../src/network/NetworkStatusController.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sDAA0E;AAC1E,kCAAqD;AAyCrD,MAAM,mBAAmB,GAAkB;IAC1C,KAAK,EAAE,MAAM;IACb,OAAO,EAAE,MAAM;IACf,OAAO,EAAE,MAAM;IACf,OAAO,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAa,uBAAwB,SAAQ,wBAAuD;IAQnG;;;;;OAKG;IACH,YAAY,MAAqC,EAAE,KAAmC;QACrF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZtB;;WAEG;QACH,SAAI,GAAG,yBAAyB,CAAC;QAUhC,IAAI,CAAC,aAAa,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG;YACnB,aAAa,EAAE;gBACd,MAAM,EAAE,mBAAmB;aAC3B;SACD,CAAC;QACF,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC3B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;KAAA;IAED;;;;OAIG;IACG,kBAAkB;;YACvB,IAAI;gBACH,MAAM,IAAI,GAAG,MAAM,kBAAW,CAAC,0CAA0C,CAAC,CAAC;gBAC3E,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B,CAAC,mBAAmB,CAAC;aACpF;YAAC,OAAO,KAAK,EAAE;gBACf,0BAA0B;gBAC1B,OAAO,mBAAmB,CAAC;aAC3B;QACF,CAAC;KAAA;IAED;;;;OAIG;IACG,qBAAqB;;YAC1B,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO;aACP;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC;KAAA;CACD;AAnED,0DAmEC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\n/**\n * Network status code string\n */\nexport type Status = 'ok' | 'down' | 'degraded';\n\n/**\n * Network status object\n */\nexport interface NetworkStatus {\n\tkovan: Status;\n\tmainnet: Status;\n\trinkeby: Status;\n\tropsten: Status;\n}\n\n/**\n * @type NetworkStatusConfig\n *\n * Network status controller configuration\n *\n * @property interval - Polling interval used to fetch network status\n */\nexport interface NetworkStatusConfig extends BaseConfig {\n\tinterval: number;\n}\n\n/**\n * @type NetworkStatusState\n *\n * Network status controller state\n *\n * @property networkStatus - Providers mapped to network status objects\n */\nexport interface NetworkStatusState extends BaseState {\n\tnetworkStatus: {\n\t\tinfura: NetworkStatus;\n\t};\n}\n\nconst DOWN_NETWORK_STATUS: NetworkStatus = {\n\tkovan: 'down',\n\tmainnet: 'down',\n\trinkeby: 'down',\n\tropsten: 'down'\n};\n\n/**\n * Controller that passively polls on a set interval for network status of providers\n */\nexport class NetworkStatusController extends BaseController<NetworkStatusConfig, NetworkStatusState> {\n\tprivate handle?: NodeJS.Timer;\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'NetworkStatusController';\n\n\t/**\n\t * Creates a NetworkStatusController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<NetworkStatusConfig>, state?: Partial<NetworkStatusState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = { interval: 180000 };\n\t\tthis.defaultState = {\n\t\t\tnetworkStatus: {\n\t\t\t\tinfura: DOWN_NETWORK_STATUS\n\t\t\t}\n\t\t};\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch network status\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updateNetworkStatuses());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Fetches infura network status\n\t *\n\t * @returns - Promise resolving to an infura network status object\n\t */\n\tasync updateInfuraStatus(): Promise<NetworkStatus> {\n\t\ttry {\n\t\t\tconst json = await handleFetch('https://api.infura.io/v1/status/metamask');\n\t\t\treturn json && json.mainnet ? json : /* istanbul ignore next */ DOWN_NETWORK_STATUS;\n\t\t} catch (error) {\n\t\t\t/* istanbul ignore next */\n\t\t\treturn DOWN_NETWORK_STATUS;\n\t\t}\n\t}\n\n\t/**\n\t * Updates network status for all providers\n\t *\n\t * @returns - Promise resolving when this operation completes\n\t */\n\tasync updateNetworkStatuses() {\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\t\tconst infura = await this.updateInfuraStatus();\n\t\tthis.update({ networkStatus: { infura } });\n\t}\n}\n\nexport default NetworkStatusController;\n"]}