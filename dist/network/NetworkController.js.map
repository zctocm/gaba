{"version":3,"file":"NetworkController.js","sourceRoot":"","sources":["../../src/network/NetworkController.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\n\nconst EthQuery = require('eth-query');\nconst Subprovider = require('web3-provider-engine/subproviders/provider.js');\nconst createInfuraProvider = require('eth-json-rpc-infura/src/createProvider');\nconst createMetamaskProvider = require('web3-provider-engine//zero.js');\nconst Mutex = require('await-semaphore').Mutex;\n\n/**\n * Human-readable network name\n */\nexport type NetworkType = 'kovan' | 'localhost' | 'mainnet' | 'rinkeby' | 'goerli' | 'ropsten' | 'rpc';\n\n/**\n * @type ProviderConfig\n *\n * Configuration passed to web3-provider-engine\n *\n * @param rpcTarget? - RPC target URL\n * @param type - Human-readable network name\n * @param chainId? - Network ID as per EIP-155\n * @param ticker? - Currency ticker\n * @param nickname? - Personalized network name\n */\nexport interface ProviderConfig {\n\trpcTarget?: string;\n\ttype: NetworkType;\n\tchainId?: string;\n\tticker?: string;\n\tnickname?: string;\n}\n\n/**\n * @type NetworkConfig\n *\n * Network controller configuration\n *\n * @property providerConfig - web3-provider-engine configuration\n */\nexport interface NetworkConfig extends BaseConfig {\n\tproviderConfig: ProviderConfig;\n}\n\n/**\n * @type NetworkState\n *\n * Network controller state\n *\n * @property network - Network ID as per net_version\n * @property provider - RPC URL and network name provider settings\n */\nexport interface NetworkState extends BaseState {\n\tnetwork: string;\n\tprovider: ProviderConfig;\n}\n\nconst LOCALHOST_RPC_URL = 'http://localhost:8545';\n\n/**\n * Controller that creates and manages an Ethereum network provider\n */\nexport class NetworkController extends BaseController<NetworkConfig, NetworkState> {\n\tprivate ethQuery: any;\n\tprivate internalProviderConfig: ProviderConfig = {} as ProviderConfig;\n\tprivate mutex = new Mutex();\n\n\tprivate initializeProvider(\n\t\ttype: NetworkType,\n\t\trpcTarget?: string,\n\t\tchainId?: string,\n\t\tticker?: string,\n\t\tnickname?: string\n\t) {\n\t\tswitch (type) {\n\t\t\tcase 'kovan':\n\t\t\tcase 'mainnet':\n\t\t\t\tthis.setupInfuraProvider(type);\n\t\t\t\tbreak;\n\t\t\tcase 'rinkeby':\n\t\t\tcase 'goerli':\n\t\t\tcase 'ropsten':\n\t\t\t\tthis.setupInfuraProvider(type);\n\t\t\t\tbreak;\n\t\t\tcase 'localhost':\n\t\t\t\tthis.setupStandardProvider(LOCALHOST_RPC_URL);\n\t\t\t\tbreak;\n\t\t\tcase 'rpc':\n\t\t\t\trpcTarget && this.setupStandardProvider(rpcTarget, chainId, ticker, nickname);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate refreshNetwork() {\n\t\tthis.update({ network: 'loading' });\n\t\tconst { rpcTarget, type, chainId, ticker } = this.state.provider;\n\t\tthis.initializeProvider(type, rpcTarget, chainId, ticker);\n\t\tthis.lookupNetwork();\n\t}\n\n\tprivate registerProvider() {\n\t\tthis.provider.on('error', this.verifyNetwork.bind(this));\n\t\tthis.ethQuery = new EthQuery(this.provider);\n\t}\n\n\tprivate setupInfuraProvider(type: NetworkType) {\n\t\tconst infuraProvider = createInfuraProvider({ network: type });\n\t\tconst infuraSubprovider = new Subprovider(infuraProvider);\n\t\tconst config = {\n\t\t\t...this.internalProviderConfig,\n\t\t\t...{\n\t\t\t\tdataSubprovider: infuraSubprovider,\n\t\t\t\tengineParams: {\n\t\t\t\t\tblockTrackerProvider: infuraProvider,\n\t\t\t\t\tpollingInterval: 12000\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.updateProvider(createMetamaskProvider(config));\n\t}\n\n\tprivate setupStandardProvider(rpcTarget: string, chainId?: string, ticker?: string, nickname?: string) {\n\t\tconst config = {\n\t\t\t...this.internalProviderConfig,\n\t\t\t...{\n\t\t\t\tchainId,\n\t\t\t\tengineParams: { pollingInterval: 12000 },\n\t\t\t\tnickname,\n\t\t\t\trpcUrl: rpcTarget,\n\t\t\t\tticker\n\t\t\t}\n\t\t};\n\t\tthis.updateProvider(createMetamaskProvider(config));\n\t}\n\n\tprivate updateProvider(provider: any) {\n\t\tthis.safelyStopProvider(this.provider);\n\t\tthis.provider = provider;\n\t\tthis.registerProvider();\n\t}\n\n\tprivate safelyStopProvider(provider: any) {\n\t\tsetTimeout(() => {\n\t\t\tprovider && provider.stop();\n\t\t}, 500);\n\t}\n\n\tprivate verifyNetwork() {\n\t\tthis.state.network === 'loading' && this.lookupNetwork();\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'NetworkController';\n\n\t/**\n\t * Ethereum provider object for the current network\n\t */\n\tprovider: any;\n\n\t/**\n\t * Creates a NetworkController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<NetworkConfig>, state?: Partial<NetworkState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultState = {\n\t\t\tnetwork: 'loading',\n\t\t\tprovider: { type: 'mainnet' }\n\t\t};\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Sets a new configuration for web3-provider-engine\n\t *\n\t * @param providerConfig - web3-provider-engine configuration\n\t */\n\tset providerConfig(providerConfig: ProviderConfig) {\n\t\tthis.internalProviderConfig = providerConfig;\n\t\tconst { type, rpcTarget, chainId, ticker, nickname } = this.state.provider;\n\t\tthis.initializeProvider(type, rpcTarget, chainId, ticker, nickname);\n\t\tthis.registerProvider();\n\t\tthis.lookupNetwork();\n\t}\n\n\t/**\n\t * Refreshes the current network code\n\t */\n\tasync lookupNetwork() {\n\t\t/* istanbul ignore if */\n\t\tif (!this.ethQuery || !this.ethQuery.sendAsync) {\n\t\t\treturn;\n\t\t}\n\t\tconst releaseLock = await this.mutex.acquire();\n\t\tthis.ethQuery.sendAsync({ method: 'net_version' }, (error: Error, network: string) => {\n\t\t\tthis.update({ network: error ? /* istanbul ignore next*/ 'loading' : network });\n\t\t\treleaseLock();\n\t\t});\n\t}\n\n\t/**\n\t * Convenience method to update provider network type settings\n\t *\n\t * @param type - Human readable network name\n\t */\n\tsetProviderType(type: NetworkType) {\n\t\tconst { rpcTarget, chainId, nickname, ...providerState } = this.state.provider;\n\t\tthis.update({\n\t\t\tprovider: {\n\t\t\t\t...providerState,\n\t\t\t\t...{ type, ticker: 'ETH' }\n\t\t\t}\n\t\t});\n\t\tthis.refreshNetwork();\n\t}\n\n\t/**\n\t * Convenience method to update provider RPC settings\n\t *\n\t * @param rpcTarget - RPC endpoint URL\n\t * @param chainId? - Network ID as per EIP-155\n\t * @param ticker? - Currency ticker\n\t * @param nickname? - Personalized network name\n\t */\n\tsetRpcTarget(rpcTarget: string, chainId?: string, ticker?: string, nickname?: string) {\n\t\tthis.update({\n\t\t\tprovider: {\n\t\t\t\t...this.state.provider,\n\t\t\t\t...{ type: 'rpc', ticker, rpcTarget, chainId, nickname }\n\t\t\t}\n\t\t});\n\t\tthis.refreshNetwork();\n\t}\n}\n\nexport default NetworkController;\n"]}