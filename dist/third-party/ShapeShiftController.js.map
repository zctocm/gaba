{"version":3,"file":"ShapeShiftController.js","sourceRoot":"","sources":["../../src/third-party/ShapeShiftController.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\n/**\n * @type ShapeShiftTransaction\n *\n * ShapeShift transaction object\n *\n * @property depositAddress - Address where coins should be deposited\n * @property depositType - Abbreviation of the type of crypto currency to be deposited\n * @property key - Unique string to identify this transaction as a ShapeShift transaction\n * @property response - Populated with a ShapeShiftResponse object upon transaction completion\n * @property time - Timestamp when this transction was last updated\n */\nexport interface ShapeShiftTransaction {\n\tdepositAddress: string;\n\tdepositType: string;\n\tkey: string;\n\tresponse?: ShapeShiftResponse;\n\ttime: number;\n}\n\n/**\n * @type ShapeShiftResponse\n *\n * ShapeShift transaction response object\n *\n * @property status - String indicating transactional status\n */\nexport interface ShapeShiftResponse {\n\tstatus: 'complete' | 'failed' | 'no_deposits' | 'received';\n}\n\n/**\n * @type ShapeShiftConfig\n *\n * ShapeShift controller configuration\n *\n * @property interval - Polling interval used to fetch ShapeShift transactions\n */\nexport interface ShapeShiftConfig extends BaseConfig {\n\tinterval: number;\n}\n\n/**\n * @type ShapeShiftState\n *\n * ShapeShift controller state\n *\n * @property shapeShiftTxList - List of ShapeShift transactions\n */\nexport interface ShapeShiftState extends BaseState {\n\tshapeShiftTxList: ShapeShiftTransaction[];\n}\n\n/**\n * Controller that passively polls on a set interval for ShapeShift transactions\n */\nexport class ShapeShiftController extends BaseController<ShapeShiftConfig, ShapeShiftState> {\n\tprivate handle?: NodeJS.Timer;\n\n\tprivate getPendingTransactions() {\n\t\treturn this.state.shapeShiftTxList.filter((tx) => !tx.response || tx.response.status !== 'complete');\n\t}\n\n\tprivate getUpdateURL(transaction: ShapeShiftTransaction) {\n\t\treturn `https://shapeshift.io/txStat/${transaction.depositAddress}`;\n\t}\n\n\tprivate async updateTransaction(transaction: ShapeShiftTransaction) {\n\t\treturn safelyExecute(async () => {\n\t\t\ttransaction.response = await handleFetch(this.getUpdateURL(transaction));\n\t\t\tif (transaction.response && transaction.response.status === 'complete') {\n\t\t\t\ttransaction.time = Date.now();\n\t\t\t}\n\t\t\treturn transaction;\n\t\t});\n\t}\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'ShapeShiftController';\n\n\t/**\n\t * Creates a ShapeShiftController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<ShapeShiftConfig>, state?: Partial<ShapeShiftState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = { interval: 3000 };\n\t\tthis.defaultState = { shapeShiftTxList: [] };\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new ShapeShift transactions\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updateTransactionList());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Creates a new ShapeShift transaction\n\t *\n\t * @param depositAddress - Address where coins should be deposited\n\t * @param depositType - Abbreviation of the type of crypto currency to be deposited\n\t */\n\tcreateTransaction(depositAddress: string, depositType: string) {\n\t\tconst { shapeShiftTxList } = this.state;\n\t\tconst transaction = {\n\t\t\tdepositAddress,\n\t\t\tdepositType,\n\t\t\tkey: 'shapeshift',\n\t\t\tresponse: undefined,\n\t\t\ttime: Date.now()\n\t\t};\n\n\t\tshapeShiftTxList.push(transaction);\n\t\tthis.update({ shapeShiftTxList: [...shapeShiftTxList] });\n\t}\n\n\t/**\n\t * Updates list of ShapeShift transactions\n\t *\n\t * @returns - Promise resolving when this operation completes\n\t */\n\tasync updateTransactionList() {\n\t\tconst { shapeShiftTxList } = this.state;\n\t\tconst pendingTx = this.getPendingTransactions();\n\n\t\tif (this.disabled || pendingTx.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tawait Promise.all(pendingTx.map((tx) => this.updateTransaction(tx)));\n\t\tthis.update({ shapeShiftTxList: [...shapeShiftTxList] });\n\t}\n}\n\nexport default ShapeShiftController;\n"]}