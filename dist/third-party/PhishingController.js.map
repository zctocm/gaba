{"version":3,"file":"PhishingController.js","sourceRoot":"","sources":["../../src/third-party/PhishingController.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sDAA0E;AAC1E,kCAAqD;AAErD,MAAM,yBAAyB,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;AACjF,MAAM,gBAAgB,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AA8CrE;;GAEG;AACH,MAAa,kBAAmB,SAAQ,wBAA6C;IASpF;;;;;OAKG;IACH,YAAY,MAAgC,EAAE,KAA8B;QAC3E,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZtB;;WAEG;QACH,SAAI,GAAG,oBAAoB,CAAC;QAU3B,IAAI,CAAC,aAAa,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG;YACnB,QAAQ,EAAE,yBAAyB;YACnC,SAAS,EAAE,EAAE;SACb,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC3B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;KAAA;IAED;;;;;OAKG;IACH,IAAI,CAAC,MAAc;QAClB,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YAChD,OAAO,KAAK,CAAC;SACb;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,MAAc;QACpB,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YACrC,OAAO;SACP;QACD,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC,GAAG,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC;IAED;;;;OAIG;IACG,mBAAmB;;YACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO;aACP;YAED,MAAM,QAAQ,GAAG,MAAM,kBAAW,CAAC,oCAAoC,CAAC,CAAC;YACzE,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC/C,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QACvC,CAAC;KAAA;CACD;AA/ED,gDA+EC;AAED,kBAAe,kBAAkB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\nconst DEFAULT_PHISHING_RESPONSE = require('eth-phishing-detect/src/config.json');\nconst PhishingDetector = require('eth-phishing-detect/src/detector');\n\n/**\n * @type EthPhishingResponse\n *\n * Configuration response from the eth-phishing-detect package\n * consisting of approved and unapproved website origins\n *\n * @property blacklist - List of unapproved origins\n * @property fuzzylist - List of fuzzy-matched unapproved origins\n * @property tolerance - Fuzzy match tolerance level\n * @property version - Version number of this configuration\n * @property whitelist - List of approved origins\n */\nexport interface EthPhishingResponse {\n\tblacklist: string[];\n\tfuzzylist: string[];\n\ttolerance: number;\n\tversion: number;\n\twhitelist: string[];\n}\n\n/**\n * @type PhishingConfig\n *\n * Phishing controller configuration\n *\n * @property interval - Polling interval used to fetch new block / approve lists\n */\nexport interface PhishingConfig extends BaseConfig {\n\tinterval: number;\n}\n\n/**\n * @type PhishingState\n *\n * Phishing controller state\n *\n * @property phishing - eth-phishing-detect configuration\n * @property whitelist - array of temporarily-approved origins\n */\nexport interface PhishingState extends BaseState {\n\tphishing: EthPhishingResponse;\n\twhitelist: string[];\n}\n\n/**\n * Controller that passively polls on a set interval for approved and unapproved website origins\n */\nexport class PhishingController extends BaseController<PhishingConfig, PhishingState> {\n\tprivate detector: any;\n\tprivate handle?: NodeJS.Timer;\n\n\t/**\n\t * Name of this controller used during composition\n\t */\n\tname = 'PhishingController';\n\n\t/**\n\t * Creates a PhishingController instance\n\t *\n\t * @param config - Initial options used to configure this controller\n\t * @param state - Initial state to set on this controller\n\t */\n\tconstructor(config?: Partial<PhishingConfig>, state?: Partial<PhishingState>) {\n\t\tsuper(config, state);\n\t\tthis.defaultConfig = { interval: 180000 };\n\t\tthis.defaultState = {\n\t\t\tphishing: DEFAULT_PHISHING_RESPONSE,\n\t\t\twhitelist: []\n\t\t};\n\t\tthis.detector = new PhishingDetector(this.defaultState.phishing);\n\t\tthis.initialize();\n\t\tthis.poll();\n\t}\n\n\t/**\n\t * Starts a new polling interval\n\t *\n\t * @param interval - Polling interval used to fetch new approval lists\n\t */\n\tasync poll(interval?: number): Promise<void> {\n\t\tinterval && this.configure({ interval }, false, false);\n\t\tthis.handle && clearTimeout(this.handle);\n\t\tawait safelyExecute(() => this.updatePhishingLists());\n\t\tthis.handle = setTimeout(() => {\n\t\t\tthis.poll(this.config.interval);\n\t\t}, this.config.interval);\n\t}\n\n\t/**\n\t * Determines if a given origin is unapproved\n\t *\n\t * @param origin - Domain origin of a website\n\t * @returns - True if the origin is an unapproved origin\n\t */\n\ttest(origin: string): boolean {\n\t\tif (this.state.whitelist.indexOf(origin) !== -1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.detector.check(origin).result;\n\t}\n\n\t/**\n\t * Temporarily marks a given origin as approved\n\t */\n\tbypass(origin: string) {\n\t\tconst { whitelist } = this.state;\n\t\tif (whitelist.indexOf(origin) !== -1) {\n\t\t\treturn;\n\t\t}\n\t\tthis.update({ whitelist: [...whitelist, origin] });\n\t}\n\n\t/**\n\t * Updates lists of approved and unapproved website origins\n\t *\n\t * @returns Promise resolving when this operation completes\n\t */\n\tasync updatePhishingLists() {\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst phishing = await handleFetch('https://api.infura.io/v2/blacklist');\n\t\tthis.detector = new PhishingDetector(phishing);\n\t\tphishing && this.update({ phishing });\n\t}\n}\n\nexport default PhishingController;\n"]}