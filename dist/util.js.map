{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { addHexPrefix, isValidAddress, bufferToHex } from 'ethereumjs-util';\nimport { Transaction } from './transaction/TransactionController';\nimport { MessageParams } from './message-manager/MessageManager';\nimport { PersonalMessageParams } from './message-manager/PersonalMessageManager';\nimport { TypedMessageParams } from './message-manager/TypedMessageManager';\nimport { Token } from './assets/TokenRatesController';\n\nconst sigUtil = require('eth-sig-util');\nconst jsonschema = require('jsonschema');\nconst { BN, stripHexPrefix } = require('ethereumjs-util');\nconst ensNamehash = require('eth-ens-namehash');\nconst hexRe = /^[0-9A-Fa-f]+$/g;\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n\tdata: (data: string) => addHexPrefix(data),\n\tfrom: (from: string) => addHexPrefix(from).toLowerCase(),\n\tgas: (gas: string) => addHexPrefix(gas),\n\tgasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n\tnonce: (nonce: string) => addHexPrefix(nonce),\n\tto: (to: string) => addHexPrefix(to).toLowerCase(),\n\tvalue: (value: string) => addHexPrefix(value)\n};\n\n/**\n * Converts a BN object to a hex string with a '0x' prefix\n *\n * @param inputBn - BN instance to convert to a hex string\n * @returns - '0x'-prefixed hex string\n *\n */\nexport function BNToHex(inputBn: any) {\n\treturn addHexPrefix(inputBn.toString(16));\n}\n\n/**\n * Used to multiply a BN by a fraction\n *\n * @param targetBN - Number to multiply by a fraction\n * @param numerator - Numerator of the fraction multiplier\n * @param denominator - Denominator of the fraction multiplier\n * @returns - Product of the multiplication\n */\nexport function fractionBN(targetBN: any, numerator: number | string, denominator: number | string) {\n\tconst numBN = new BN(numerator);\n\tconst denomBN = new BN(denominator);\n\treturn targetBN.mul(numBN).div(denomBN);\n}\n\n/**\n * Return a URL that can be used to obtain ETH for a given network\n *\n * @param networkCode - Network code of desired network\n * @param address - Address to deposit obtained ETH\n * @param amount - How much ETH is desired\n * @returns - URL to buy ETH based on network\n */\nexport function getBuyURL(networkCode = '1', address?: string, amount = 5) {\n\tswitch (networkCode) {\n\t\tcase '1':\n\t\t\t/* tslint:disable-next-line:max-line-length */\n\t\t\treturn `https://buy.coinbase.com/?code=9ec56d01-7e81-5017-930c-513daa27bb6a&amount=${amount}&address=${address}&crypto_currency=ETH`;\n\t\tcase '3':\n\t\t\treturn 'https://faucet.metamask.io/';\n\t\tcase '4':\n\t\t\treturn 'https://www.rinkeby.io/';\n\t\tcase '5':\n\t\t\treturn 'https://goerli-faucet.slock.it/';\n\t\tcase '42':\n\t\t\treturn 'https://github.com/kovan-testnet/faucet';\n\t}\n}\n\n/**\n * Converts a hex string to a BN object\n *\n * @param inputHex - Number represented as a hex string\n * @returns - A BN instance\n *\n */\nexport function hexToBN(inputHex: string) {\n\treturn new BN(stripHexPrefix(inputHex), 16);\n}\n\n/**\n * A helper function that converts hex data to human readable string\n *\n * @param hex - The hex string to convert to string\n * @returns - A human readable string conversion\n *\n */\nexport function hexToText(hex: string) {\n\ttry {\n\t\tconst stripped = stripHexPrefix(hex);\n\t\tconst buff = Buffer.from(stripped, 'hex');\n\t\treturn buff.toString('utf8');\n\t} catch (e) {\n\t\t/* istanbul ignore next */\n\t\treturn hex;\n\t}\n}\n\n/**\n * Normalizes properties on a Transaction object\n *\n * @param transaction - Transaction object to normalize\n * @returns - Normalized Transaction object\n */\nexport function normalizeTransaction(transaction: Transaction) {\n\tconst normalizedTransaction: Transaction = { from: '' };\n\tlet key: keyof Transaction;\n\tfor (key in NORMALIZERS) {\n\t\tif (transaction[key as keyof Transaction]) {\n\t\t\tnormalizedTransaction[key] = NORMALIZERS[key](transaction[key]);\n\t\t}\n\t}\n\treturn normalizedTransaction;\n}\n\n/**\n * Execute and return an asynchronous operation without throwing errors\n *\n * @param operation - Function returning a Promise\n * @param logError - Determines if the error should be logged\n * @param retry - Function called if an error is caught\n * @returns - Promise resolving to the result of the async operation\n */\nexport async function safelyExecute(operation: () => Promise<any>, logError = false, retry?: (error: Error) => void) {\n\ttry {\n\t\treturn await operation();\n\t} catch (error) {\n\t\t/* istanbul ignore next */\n\t\tif (logError) {\n\t\t\tconsole.error(error);\n\t\t}\n\t\tretry && retry(error);\n\t}\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate\n */\nexport function validateTransaction(transaction: Transaction) {\n\tif (!transaction.from || typeof transaction.from !== 'string' || !isValidAddress(transaction.from)) {\n\t\tthrow new Error(`Invalid \"from\" address: ${transaction.from} must be a valid string.`);\n\t}\n\tif (transaction.to === '0x' || transaction.to === undefined) {\n\t\tif (transaction.data) {\n\t\t\tdelete transaction.to;\n\t\t} else {\n\t\t\tthrow new Error(`Invalid \"to\" address: ${transaction.to} must be a valid string.`);\n\t\t}\n\t} else if (transaction.to !== undefined && !isValidAddress(transaction.to)) {\n\t\tthrow new Error(`Invalid \"to\" address: ${transaction.to} must be a valid string.`);\n\t}\n\tif (transaction.value !== undefined) {\n\t\tconst value = transaction.value.toString();\n\t\tif (value.includes('-')) {\n\t\t\tthrow new Error(`Invalid \"value\": ${value} is not a positive number.`);\n\t\t}\n\t\tif (value.includes('.')) {\n\t\t\tthrow new Error(`Invalid \"value\": ${value} number must be denominated in wei.`);\n\t\t}\n\t\tconst intValue = parseInt(transaction.value, 10);\n\t\tconst isValid =\n\t\t\tNumber.isFinite(intValue) && !Number.isNaN(intValue) && !isNaN(+value) && Number.isSafeInteger(intValue);\n\t\tif (!isValid) {\n\t\t\tthrow new Error(`Invalid \"value\": ${value} number must be a valid number.`);\n\t\t}\n\t}\n}\n\n/**\n * A helper function that converts rawmessageData buffer data to a hex, or just returns the data if\n * it is already formatted as a hex.\n *\n * @param data - The buffer data to convert to a hex\n * @returns - A hex string conversion of the buffer data\n *\n */\nexport function normalizeMessageData(data: string) {\n\ttry {\n\t\tconst stripped = stripHexPrefix(data);\n\t\tif (stripped.match(hexRe)) {\n\t\t\treturn addHexPrefix(stripped);\n\t\t}\n\t} catch (e) {\n\t\t/* istanbul ignore next */\n\t}\n\treturn bufferToHex(Buffer.from(data, 'utf8'));\n}\n\n/**\n * Validates a PersonalMessageParams and MessageParams objects for required properties and throws in\n * the event of any validation error.\n *\n * @param messageData - PersonalMessageParams object to validate\n */\nexport function validateSignMessageData(messageData: PersonalMessageParams | MessageParams) {\n\tif (!messageData.from || typeof messageData.from !== 'string' || !isValidAddress(messageData.from)) {\n\t\tthrow new Error(`Invalid \"from\" address: ${messageData.from} must be a valid string.`);\n\t}\n\tif (!messageData.data || typeof messageData.data !== 'string') {\n\t\tthrow new Error(`Invalid message \"data\": ${messageData.data} must be a valid string.`);\n\t}\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V1.\n *\n * @param messageData - TypedMessageParams object to validate\n * @param activeChainId - Active chain id\n */\nexport function validateTypedSignMessageDataV1(messageData: TypedMessageParams) {\n\tif (!messageData.from || typeof messageData.from !== 'string' || !isValidAddress(messageData.from)) {\n\t\tthrow new Error(`Invalid \"from\" address: ${messageData.from} must be a valid string.`);\n\t}\n\tif (!messageData.data || !Array.isArray(messageData.data)) {\n\t\tthrow new Error(`Invalid message \"data\": ${messageData.data} must be a valid array.`);\n\t}\n\ttry {\n\t\tsigUtil.typedSignatureHash(messageData.data);\n\t} catch (e) {\n\t\tthrow new Error(`Expected EIP712 typed data.`);\n\t}\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V3.\n *\n * @param messageData - TypedMessageParams object to validate\n */\nexport function validateTypedSignMessageDataV3(messageData: TypedMessageParams) {\n\tif (!messageData.from || typeof messageData.from !== 'string' || !isValidAddress(messageData.from)) {\n\t\tthrow new Error(`Invalid \"from\" address: ${messageData.from} must be a valid string.`);\n\t}\n\tif (!messageData.data || typeof messageData.data !== 'string') {\n\t\tthrow new Error(`Invalid message \"data\": ${messageData.data} must be a valid array.`);\n\t}\n\tlet data;\n\ttry {\n\t\tdata = JSON.parse(messageData.data);\n\t} catch (e) {\n\t\tthrow new Error('Data must be passed as a valid JSON string.');\n\t}\n\tconst validation = jsonschema.validate(data, sigUtil.TYPED_MESSAGE_SCHEMA);\n\tif (validation.errors.length > 0) {\n\t\tthrow new Error('Data must conform to EIP-712 schema. See https://git.io/fNtcx.');\n\t}\n}\n\n/**\n * Validates a ERC20 token to be added with EIP747.\n *\n * @param token - Token object to validate\n */\nexport function validateTokenToWatch(token: Token) {\n\tconst { address, symbol, decimals } = token;\n\tif (!address || !symbol || typeof decimals === 'undefined') {\n\t\tthrow new Error(`Cannot suggest token without address, symbol, and decimals`);\n\t}\n\tif (!(symbol.length < 7)) {\n\t\tthrow new Error(`Invalid symbol ${symbol} more than six characters`);\n\t}\n\tif (isNaN(decimals) || decimals > 36 || decimals < 0) {\n\t\tthrow new Error(`Invalid decimals ${decimals} must be at least 0, and not over 36`);\n\t}\n\tif (!isValidAddress(address)) {\n\t\tthrow new Error(`Invalid address ${address}`);\n\t}\n}\n\n/**\n * Returns wether the given code corresponds to a smart contract\n *\n * @returns {string} - Corresponding code to review\n */\nexport function isSmartContractCode(code: string) {\n\t/* istanbul ignore if */\n\tif (!code) {\n\t\treturn false;\n\t}\n\t// Geth will return '0x', and ganache-core v2.2.1 will return '0x0'\n\tconst smartContractCode = code !== '0x' && code !== '0x0';\n\treturn smartContractCode;\n}\n\n/**\n * Execute fetch and verify that the response was successful\n *\n * @param request - Request information\n * @param options - Options\n * @returns - Promise resolving to the fetch response\n */\nexport async function successfulFetch(request: string, options?: RequestInit) {\n\tconst response = await fetch(request, options);\n\tif (!response.ok) {\n\t\tthrow new Error(`Fetch failed with status '${response.status}' for request '${request}'`);\n\t}\n\treturn response;\n}\n\n/**\n * Execute fetch and return object response\n *\n * @param request - Request information\n * @param options - Options\n * @returns - Promise resolving to the result object of fetch\n */\nexport async function handleFetch(request: string, options?: RequestInit) {\n\tconst response = await successfulFetch(request, options);\n\tconst object = await response.json();\n\treturn object;\n}\n\n/**\n * Fetch that fails after timeout\n *\n * @param url - Url to fetch\n * @param options - Options to send with the request\n * @param timeout - Timeout to fail request\n *\n * @returns - Promise resolving the request\n */\nexport async function timeoutFetch(url: string, options?: RequestInit, timeout: number = 500): Promise<Response> {\n\treturn Promise.race([\n\t\tsuccessfulFetch(url, options),\n\t\tnew Promise<Response>((_, reject) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\treject(new Error('timeout'));\n\t\t\t}, timeout)\n\t\t)\n\t]);\n}\n\n/**\n * Normalizes the given ENS name.\n *\n * @param {string} ensName - The ENS name\n *\n * @returns - the normalized ENS name string\n */\nexport function normalizeEnsName(ensName: string): string | null {\n\tif (ensName && typeof ensName === 'string') {\n\t\ttry {\n\t\t\tconst normalized = ensNamehash.normalize(ensName.trim());\n\t\t\t// this regex is only sufficient with the above call to ensNamehash.normalize\n\t\t\t// TODO: change 7 in regex to 3 when shorter ENS domains are live\n\t\t\tif (normalized.match(/^(([\\w\\d\\-]+)\\.)*[\\w\\d\\-]{7,}\\.(eth|test)$/)) {\n\t\t\t\treturn normalized;\n\t\t\t}\n\t\t} catch (_) {\n\t\t\t// do nothing\n\t\t}\n\t}\n\treturn null;\n}\n\nexport default {\n\tBNToHex,\n\tfractionBN,\n\tgetBuyURL,\n\thandleFetch,\n\thexToBN,\n\thexToText,\n\tisSmartContractCode,\n\tnormalizeTransaction,\n\tsafelyExecute,\n\tsuccessfulFetch,\n\ttimeoutFetch,\n\tvalidateTokenToWatch,\n\tvalidateTransaction,\n\tvalidateTypedSignMessageDataV1,\n\tvalidateTypedSignMessageDataV3\n};\n"]}